//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 34 colors.
  struct color {
    /// Color `SpO2Average`.
    static let spO2Average = Rswift.ColorResource(bundle: R.hostingBundle, name: "SpO2Average")
    /// Color `SpO2Low`.
    static let spO2Low = Rswift.ColorResource(bundle: R.hostingBundle, name: "SpO2Low")
    /// Color `active`.
    static let active = Rswift.ColorResource(bundle: R.hostingBundle, name: "active")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `biolightHigh1`.
    static let biolightHigh1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightHigh1")
    /// Color `biolightHigh2`.
    static let biolightHigh2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightHigh2")
    /// Color `biolightLow`.
    static let biolightLow = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightLow")
    /// Color `biolightNormal`.
    static let biolightNormal = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightNormal")
    /// Color `biolightPre`.
    static let biolightPre = Rswift.ColorResource(bundle: R.hostingBundle, name: "biolightPre")
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `darkText`.
    static let darkText = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkText")
    /// Color `disable`.
    static let disable = Rswift.ColorResource(bundle: R.hostingBundle, name: "disable")
    /// Color `good`.
    static let good = Rswift.ColorResource(bundle: R.hostingBundle, name: "good")
    /// Color `high`.
    static let high = Rswift.ColorResource(bundle: R.hostingBundle, name: "high")
    /// Color `idealWeightColor`.
    static let idealWeightColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "idealWeightColor")
    /// Color `mainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainColor")
    /// Color `overweight1`.
    static let overweight1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "overweight1")
    /// Color `overweight2`.
    static let overweight2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "overweight2")
    /// Color `overweight`.
    static let overweight = Rswift.ColorResource(bundle: R.hostingBundle, name: "overweight")
    /// Color `ratioOfFatColor`.
    static let ratioOfFatColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfFatColor")
    /// Color `ratioOfProteinColor`.
    static let ratioOfProteinColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfProteinColor")
    /// Color `ratioOfSubcutaneousFatColor`.
    static let ratioOfSubcutaneousFatColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfSubcutaneousFatColor")
    /// Color `ratioOfWaterColor`.
    static let ratioOfWaterColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ratioOfWaterColor")
    /// Color `red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "red")
    /// Color `separatorColor`.
    static let separatorColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "separatorColor")
    /// Color `spO2Good`.
    static let spO2Good = Rswift.ColorResource(bundle: R.hostingBundle, name: "spO2Good")
    /// Color `standard`.
    static let standard = Rswift.ColorResource(bundle: R.hostingBundle, name: "standard")
    /// Color `subTitle`.
    static let subTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "subTitle")
    /// Color `thin`.
    static let thin = Rswift.ColorResource(bundle: R.hostingBundle, name: "thin")
    /// Color `title`.
    static let title = Rswift.ColorResource(bundle: R.hostingBundle, name: "title")
    /// Color `weightColor`.
    static let weightColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "weightColor")
    /// Color `weightOfBoneColor`.
    static let weightOfBoneColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "weightOfBoneColor")
    /// Color `weightOfMuscleColor`.
    static let weightOfMuscleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "weightOfMuscleColor")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SpO2Average", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spO2Average(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spO2Average, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SpO2Low", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spO2Low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spO2Low, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "active", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightHigh1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightHigh1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightHigh1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightHigh2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightHigh2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightHigh2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightLow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightNormal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "biolightPre", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func biolightPre(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.biolightPre, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "disable", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "good", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "high", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func high(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.high, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "idealWeightColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func idealWeightColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.idealWeightColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overweight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overweight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overweight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overweight1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overweight1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overweight1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overweight2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overweight2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overweight2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfFatColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfFatColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfFatColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfProteinColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfProteinColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfProteinColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfSubcutaneousFatColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfSubcutaneousFatColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfSubcutaneousFatColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ratioOfWaterColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ratioOfWaterColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ratioOfWaterColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "separatorColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "spO2Good", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func spO2Good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.spO2Good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "standard", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func standard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.standard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "subTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "thin", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "weightColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weightColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weightColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "weightOfBoneColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weightOfBoneColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weightOfBoneColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "weightOfMuscleColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weightOfMuscleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weightOfMuscleColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SpO2Average", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spO2Average(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spO2Average.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SpO2Low", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spO2Low(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spO2Low.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "active", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func active(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.active.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightHigh1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightHigh1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightHigh1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightHigh2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightHigh2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightHigh2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightLow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightLow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightLow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightNormal", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightNormal(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightNormal.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "biolightPre", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func biolightPre(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.biolightPre.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darkText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "disable", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func disable(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.disable.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "good", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func good(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.good.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "high", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func high(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.high.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "idealWeightColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func idealWeightColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.idealWeightColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overweight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overweight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overweight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overweight1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overweight1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overweight1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overweight2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overweight2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overweight2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfFatColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfFatColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfFatColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfProteinColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfProteinColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfProteinColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfSubcutaneousFatColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfSubcutaneousFatColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfSubcutaneousFatColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ratioOfWaterColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ratioOfWaterColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ratioOfWaterColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "separatorColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func separatorColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.separatorColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "spO2Good", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func spO2Good(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.spO2Good.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "standard", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func standard(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.standard.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "subTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "thin", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func thin(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.thin.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "title", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func title(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.title.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "weightColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weightColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weightColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "weightOfBoneColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weightOfBoneColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weightOfBoneColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "weightOfMuscleColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weightOfMuscleColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weightOfMuscleColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 14 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `LICENSE.txt`.
    static let licenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "txt")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LICENSE", withExtension: "txt")`
    static func licenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 93 images.
  struct image {
    /// Image `1SK-SmartScale68`.
    static let skSmartScale68 = Rswift.ImageResource(bundle: R.hostingBundle, name: "1SK-SmartScale68")
    /// Image `AL_WBP`.
    static let al_WBP = Rswift.ImageResource(bundle: R.hostingBundle, name: "AL_WBP")
    /// Image `Health Scale`.
    static let healthScale = Rswift.ImageResource(bundle: R.hostingBundle, name: "Health Scale")
    /// Image `O2 2291`.
    static let o22291 = Rswift.ImageResource(bundle: R.hostingBundle, name: "O2 2291")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `ic_add_profile`.
    static let ic_add_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_profile")
    /// Image `ic_add_white`.
    static let ic_add_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_white")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_average_hr`.
    static let ic_average_hr = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_average_hr")
    /// Image `ic_average_spO2`.
    static let ic_average_spO2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_average_spO2")
    /// Image `ic_back_gray`.
    static let ic_back_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_gray")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_blood_pressure`.
    static let ic_blood_pressure = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blood_pressure")
    /// Image `ic_bluetooth`.
    static let ic_bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bluetooth")
    /// Image `ic_bp_error_state`.
    static let ic_bp_error_state = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bp_error_state")
    /// Image `ic_bp`.
    static let ic_bp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bp")
    /// Image `ic_button_link`.
    static let ic_button_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_button_link")
    /// Image `ic_calo`.
    static let ic_calo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calo")
    /// Image `ic_camera_2`.
    static let ic_camera_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_2")
    /// Image `ic_camera_black`.
    static let ic_camera_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_black")
    /// Image `ic_charging`.
    static let ic_charging = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_charging")
    /// Image `ic_chart`.
    static let ic_chart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chart")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_default_avatar`.
    static let ic_default_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_default_avatar")
    /// Image `ic_delete_2`.
    static let ic_delete_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_2")
    /// Image `ic_delete_black`.
    static let ic_delete_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_black")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_distance`.
    static let ic_distance = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_distance")
    /// Image `ic_down`.
    static let ic_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_down")
    /// Image `ic_drop_down`.
    static let ic_drop_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_down")
    /// Image `ic_drop_up`.
    static let ic_drop_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_up")
    /// Image `ic_facebook`.
    static let ic_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebook")
    /// Image `ic_floors`.
    static let ic_floors = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_floors")
    /// Image `ic_google`.
    static let ic_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google")
    /// Image `ic_heart_rate`.
    static let ic_heart_rate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_rate")
    /// Image `ic_heart`.
    static let ic_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart")
    /// Image `ic_home_bike`.
    static let ic_home_bike = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_bike")
    /// Image `ic_home_climb`.
    static let ic_home_climb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_climb")
    /// Image `ic_home_run`.
    static let ic_home_run = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_run")
    /// Image `ic_home_selected`.
    static let ic_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_selected")
    /// Image `ic_home_spo2`.
    static let ic_home_spo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_spo2")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_kcal`.
    static let ic_kcal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_kcal")
    /// Image `ic_link_2`.
    static let ic_link_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_link_2")
    /// Image `ic_link`.
    static let ic_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_link")
    /// Image `ic_love_black`.
    static let ic_love_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_love_black")
    /// Image `ic_minus`.
    static let ic_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minus")
    /// Image `ic_moon`.
    static let ic_moon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_moon")
    /// Image `ic_next_gray`.
    static let ic_next_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next_gray")
    /// Image `ic_next`.
    static let ic_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next")
    /// Image `ic_not_sync`.
    static let ic_not_sync = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_not_sync")
    /// Image `ic_notification_gray_3`.
    static let ic_notification_gray_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification_gray_3")
    /// Image `ic_notification_selected`.
    static let ic_notification_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification_selected")
    /// Image `ic_notification`.
    static let ic_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification")
    /// Image `ic_option`.
    static let ic_option = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_option")
    /// Image `ic_phone_ble`.
    static let ic_phone_ble = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone_ble")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_pr`.
    static let ic_pr = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pr")
    /// Image `ic_radioButton_selected`.
    static let ic_radioButton_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radioButton_selected")
    /// Image `ic_radioButton_unSelected`.
    static let ic_radioButton_unSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radioButton_unSelected")
    /// Image `ic_run`.
    static let ic_run = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_run")
    /// Image `ic_s5_bike`.
    static let ic_s5_bike = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_s5_bike")
    /// Image `ic_s5_climb`.
    static let ic_s5_climb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_s5_climb")
    /// Image `ic_s5_goal`.
    static let ic_s5_goal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_s5_goal")
    /// Image `ic_s5_run`.
    static let ic_s5_run = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_s5_run")
    /// Image `ic_s5_slider`.
    static let ic_s5_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_s5_slider")
    /// Image `ic_s5_walk`.
    static let ic_s5_walk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_s5_walk")
    /// Image `ic_setting_selected`.
    static let ic_setting_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_selected")
    /// Image `ic_setting_white`.
    static let ic_setting_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_white")
    /// Image `ic_setting`.
    static let ic_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting")
    /// Image `ic_sleep`.
    static let ic_sleep = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sleep")
    /// Image `ic_smart_watch`.
    static let ic_smart_watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_smart_watch")
    /// Image `ic_statistics`.
    static let ic_statistics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_statistics")
    /// Image `ic_step_count`.
    static let ic_step_count = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_step_count")
    /// Image `ic_step`.
    static let ic_step = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_step")
    /// Image `ic_stop_watch_time`.
    static let ic_stop_watch_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stop_watch_time")
    /// Image `ic_stress`.
    static let ic_stress = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stress")
    /// Image `ic_sync_blue`.
    static let ic_sync_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sync_blue")
    /// Image `ic_sync_gray`.
    static let ic_sync_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sync_gray")
    /// Image `ic_sync`.
    static let ic_sync = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sync")
    /// Image `ic_temperature`.
    static let ic_temperature = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_temperature")
    /// Image `ic_thermometer`.
    static let ic_thermometer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thermometer")
    /// Image `ic_thumb_image`.
    static let ic_thumb_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thumb_image")
    /// Image `ic_tracking_selected`.
    static let ic_tracking_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tracking_selected")
    /// Image `ic_tracking`.
    static let ic_tracking = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tracking")
    /// Image `ic_unlink_gray`.
    static let ic_unlink_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unlink_gray")
    /// Image `ic_unlink`.
    static let ic_unlink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unlink")
    /// Image `ic_up`.
    static let ic_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_up")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `no_notification`.
    static let no_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_notification")
    /// Image `scale`.
    static let scale = Rswift.ImageResource(bundle: R.hostingBundle, name: "scale")
    /// Image `scales`.
    static let scales = Rswift.ImageResource(bundle: R.hostingBundle, name: "scales")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "1SK-SmartScale68", bundle: ..., traitCollection: ...)`
    static func skSmartScale68(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skSmartScale68, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AL_WBP", bundle: ..., traitCollection: ...)`
    static func al_WBP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.al_WBP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Health Scale", bundle: ..., traitCollection: ...)`
    static func healthScale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.healthScale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "O2 2291", bundle: ..., traitCollection: ...)`
    static func o22291(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.o22291, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_profile", bundle: ..., traitCollection: ...)`
    static func ic_add_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_white", bundle: ..., traitCollection: ...)`
    static func ic_add_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_average_hr", bundle: ..., traitCollection: ...)`
    static func ic_average_hr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_average_hr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_average_spO2", bundle: ..., traitCollection: ...)`
    static func ic_average_spO2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_average_spO2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_gray", bundle: ..., traitCollection: ...)`
    static func ic_back_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_blood_pressure", bundle: ..., traitCollection: ...)`
    static func ic_blood_pressure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blood_pressure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bluetooth", bundle: ..., traitCollection: ...)`
    static func ic_bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bluetooth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bp", bundle: ..., traitCollection: ...)`
    static func ic_bp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bp_error_state", bundle: ..., traitCollection: ...)`
    static func ic_bp_error_state(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bp_error_state, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_button_link", bundle: ..., traitCollection: ...)`
    static func ic_button_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_button_link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calo", bundle: ..., traitCollection: ...)`
    static func ic_calo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera_2", bundle: ..., traitCollection: ...)`
    static func ic_camera_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera_black", bundle: ..., traitCollection: ...)`
    static func ic_camera_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_charging", bundle: ..., traitCollection: ...)`
    static func ic_charging(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_charging, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chart", bundle: ..., traitCollection: ...)`
    static func ic_chart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_default_avatar", bundle: ..., traitCollection: ...)`
    static func ic_default_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_default_avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_2", bundle: ..., traitCollection: ...)`
    static func ic_delete_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_black", bundle: ..., traitCollection: ...)`
    static func ic_delete_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_distance", bundle: ..., traitCollection: ...)`
    static func ic_distance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_distance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_down", bundle: ..., traitCollection: ...)`
    static func ic_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop_down", bundle: ..., traitCollection: ...)`
    static func ic_drop_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop_up", bundle: ..., traitCollection: ...)`
    static func ic_drop_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_facebook", bundle: ..., traitCollection: ...)`
    static func ic_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_floors", bundle: ..., traitCollection: ...)`
    static func ic_floors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_floors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_google", bundle: ..., traitCollection: ...)`
    static func ic_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heart", bundle: ..., traitCollection: ...)`
    static func ic_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_heart_rate", bundle: ..., traitCollection: ...)`
    static func ic_heart_rate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_rate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_bike", bundle: ..., traitCollection: ...)`
    static func ic_home_bike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_bike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_climb", bundle: ..., traitCollection: ...)`
    static func ic_home_climb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_climb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_run", bundle: ..., traitCollection: ...)`
    static func ic_home_run(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_run, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_selected", bundle: ..., traitCollection: ...)`
    static func ic_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_spo2", bundle: ..., traitCollection: ...)`
    static func ic_home_spo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_spo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_kcal", bundle: ..., traitCollection: ...)`
    static func ic_kcal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_kcal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_link", bundle: ..., traitCollection: ...)`
    static func ic_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_link_2", bundle: ..., traitCollection: ...)`
    static func ic_link_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_link_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_love_black", bundle: ..., traitCollection: ...)`
    static func ic_love_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_love_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_minus", bundle: ..., traitCollection: ...)`
    static func ic_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_moon", bundle: ..., traitCollection: ...)`
    static func ic_moon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_moon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_next", bundle: ..., traitCollection: ...)`
    static func ic_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_next_gray", bundle: ..., traitCollection: ...)`
    static func ic_next_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_not_sync", bundle: ..., traitCollection: ...)`
    static func ic_not_sync(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_not_sync, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification", bundle: ..., traitCollection: ...)`
    static func ic_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification_gray_3", bundle: ..., traitCollection: ...)`
    static func ic_notification_gray_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification_gray_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification_selected", bundle: ..., traitCollection: ...)`
    static func ic_notification_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_option", bundle: ..., traitCollection: ...)`
    static func ic_option(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_option, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_phone_ble", bundle: ..., traitCollection: ...)`
    static func ic_phone_ble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone_ble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pr", bundle: ..., traitCollection: ...)`
    static func ic_pr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radioButton_selected", bundle: ..., traitCollection: ...)`
    static func ic_radioButton_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radioButton_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radioButton_unSelected", bundle: ..., traitCollection: ...)`
    static func ic_radioButton_unSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radioButton_unSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_run", bundle: ..., traitCollection: ...)`
    static func ic_run(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_run, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_s5_bike", bundle: ..., traitCollection: ...)`
    static func ic_s5_bike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_s5_bike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_s5_climb", bundle: ..., traitCollection: ...)`
    static func ic_s5_climb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_s5_climb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_s5_goal", bundle: ..., traitCollection: ...)`
    static func ic_s5_goal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_s5_goal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_s5_run", bundle: ..., traitCollection: ...)`
    static func ic_s5_run(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_s5_run, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_s5_slider", bundle: ..., traitCollection: ...)`
    static func ic_s5_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_s5_slider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_s5_walk", bundle: ..., traitCollection: ...)`
    static func ic_s5_walk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_s5_walk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_setting", bundle: ..., traitCollection: ...)`
    static func ic_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_setting_selected", bundle: ..., traitCollection: ...)`
    static func ic_setting_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_setting_white", bundle: ..., traitCollection: ...)`
    static func ic_setting_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sleep", bundle: ..., traitCollection: ...)`
    static func ic_sleep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sleep, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_smart_watch", bundle: ..., traitCollection: ...)`
    static func ic_smart_watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_smart_watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_statistics", bundle: ..., traitCollection: ...)`
    static func ic_statistics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_statistics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_step", bundle: ..., traitCollection: ...)`
    static func ic_step(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_step, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_step_count", bundle: ..., traitCollection: ...)`
    static func ic_step_count(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_step_count, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_stop_watch_time", bundle: ..., traitCollection: ...)`
    static func ic_stop_watch_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stop_watch_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_stress", bundle: ..., traitCollection: ...)`
    static func ic_stress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sync", bundle: ..., traitCollection: ...)`
    static func ic_sync(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sync, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sync_blue", bundle: ..., traitCollection: ...)`
    static func ic_sync_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sync_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sync_gray", bundle: ..., traitCollection: ...)`
    static func ic_sync_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sync_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_temperature", bundle: ..., traitCollection: ...)`
    static func ic_temperature(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_temperature, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_thermometer", bundle: ..., traitCollection: ...)`
    static func ic_thermometer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thermometer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_thumb_image", bundle: ..., traitCollection: ...)`
    static func ic_thumb_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thumb_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tracking", bundle: ..., traitCollection: ...)`
    static func ic_tracking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tracking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tracking_selected", bundle: ..., traitCollection: ...)`
    static func ic_tracking_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tracking_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_unlink", bundle: ..., traitCollection: ...)`
    static func ic_unlink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unlink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_unlink_gray", bundle: ..., traitCollection: ...)`
    static func ic_unlink_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unlink_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_up", bundle: ..., traitCollection: ...)`
    static func ic_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_notification", bundle: ..., traitCollection: ...)`
    static func no_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scale", bundle: ..., traitCollection: ...)`
    static func scale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scales", bundle: ..., traitCollection: ...)`
    static func scales(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scales, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 90 nibs.
  struct nib {
    /// Nib `AddDeviceCollectionViewCell`.
    static let addDeviceCollectionViewCell = _R.nib._AddDeviceCollectionViewCell()
    /// Nib `AddProfileCollectionViewCell`.
    static let addProfileCollectionViewCell = _R.nib._AddProfileCollectionViewCell()
    /// Nib `AlertViewController`.
    static let alertViewController = _R.nib._AlertViewController()
    /// Nib `BiolightDeviceTableViewCell`.
    static let biolightDeviceTableViewCell = _R.nib._BiolightDeviceTableViewCell()
    /// Nib `BloodPressureGraphView`.
    static let bloodPressureGraphView = _R.nib._BloodPressureGraphView()
    /// Nib `BloodPressureResultViewController`.
    static let bloodPressureResultViewController = _R.nib._BloodPressureResultViewController()
    /// Nib `BloodPressureViewController`.
    static let bloodPressureViewController = _R.nib._BloodPressureViewController()
    /// Nib `BodyTypeCollecionViewCell`.
    static let bodyTypeCollecionViewCell = _R.nib._BodyTypeCollecionViewCell()
    /// Nib `CreateDefautlsProfileViewController`.
    static let createDefautlsProfileViewController = _R.nib._CreateDefautlsProfileViewController()
    /// Nib `DeviceCollectionViewCell`.
    static let deviceCollectionViewCell = _R.nib._DeviceCollectionViewCell()
    /// Nib `DeviceTableViewCell`.
    static let deviceTableViewCell = _R.nib._DeviceTableViewCell()
    /// Nib `DeviceViewController`.
    static let deviceViewController = _R.nib._DeviceViewController()
    /// Nib `DownloadDataViewController`.
    static let downloadDataViewController = _R.nib._DownloadDataViewController()
    /// Nib `ExcerciseActivityTBVCell`.
    static let excerciseActivityTBVCell = _R.nib._ExcerciseActivityTBVCell()
    /// Nib `ExcerciseChartCLVCell`.
    static let excerciseChartCLVCell = _R.nib._ExcerciseChartCLVCell()
    /// Nib `ExcerciseDetailWMYTableViewCell`.
    static let excerciseDetailWMYTableViewCell = _R.nib._ExcerciseDetailWMYTableViewCell()
    /// Nib `ExerciseDetailTableViewCell`.
    static let exerciseDetailTableViewCell = _R.nib._ExerciseDetailTableViewCell()
    /// Nib `HealthProfileDetailsViewController`.
    static let healthProfileDetailsViewController = _R.nib._HealthProfileDetailsViewController()
    /// Nib `HistoryBpResultTBVCell`.
    static let historyBpResultTBVCell = _R.nib._HistoryBpResultTBVCell()
    /// Nib `HistoryWeightResultTableViewCell`.
    static let historyWeightResultTableViewCell = _R.nib._HistoryWeightResultTableViewCell()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `IntroduceViewController`.
    static let introduceViewController = _R.nib._IntroduceViewController()
    /// Nib `MainHomeViewController`.
    static let mainHomeViewController = _R.nib._MainHomeViewController()
    /// Nib `MainTabbarViewController`.
    static let mainTabbarViewController = _R.nib._MainTabbarViewController()
    /// Nib `MeasurementCollectionViewCell`.
    static let measurementCollectionViewCell = _R.nib._MeasurementCollectionViewCell()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `NotificationViewController`.
    static let notificationViewController = _R.nib._NotificationViewController()
    /// Nib `PickerViewController`.
    static let pickerViewController = _R.nib._PickerViewController()
    /// Nib `ProfileCollectionViewCell`.
    static let profileCollectionViewCell = _R.nib._ProfileCollectionViewCell()
    /// Nib `ProfileListViewController`.
    static let profileListViewController = _R.nib._ProfileListViewController()
    /// Nib `ProfileTableViewCell`.
    static let profileTableViewCell = _R.nib._ProfileTableViewCell()
    /// Nib `S5BloodPressureChartCollectionViewCell`.
    static let s5BloodPressureChartCollectionViewCell = _R.nib._S5BloodPressureChartCollectionViewCell()
    /// Nib `S5BloodPressureDetailTableViewCell`.
    static let s5BloodPressureDetailTableViewCell = _R.nib._S5BloodPressureDetailTableViewCell()
    /// Nib `S5BloodPressureDetailViewController`.
    static let s5BloodPressureDetailViewController = _R.nib._S5BloodPressureDetailViewController()
    /// Nib `S5BloodPressureTableViewCell`.
    static let s5BloodPressureTableViewCell = _R.nib._S5BloodPressureTableViewCell()
    /// Nib `S5DeviceSettingTableViewCell`.
    static let s5DeviceSettingTableViewCell = _R.nib._S5DeviceSettingTableViewCell()
    /// Nib `S5ExerciseTableViewCell`.
    static let s5ExerciseTableViewCell = _R.nib._S5ExerciseTableViewCell()
    /// Nib `S5GoalViewController`.
    static let s5GoalViewController = _R.nib._S5GoalViewController()
    /// Nib `S5HeartRateChartCollectionViewCell`.
    static let s5HeartRateChartCollectionViewCell = _R.nib._S5HeartRateChartCollectionViewCell()
    /// Nib `S5HeartRateDetailTableViewCell`.
    static let s5HeartRateDetailTableViewCell = _R.nib._S5HeartRateDetailTableViewCell()
    /// Nib `S5HeartRateDetailViewController`.
    static let s5HeartRateDetailViewController = _R.nib._S5HeartRateDetailViewController()
    /// Nib `S5HeartRateTableViewCell`.
    static let s5HeartRateTableViewCell = _R.nib._S5HeartRateTableViewCell()
    /// Nib `S5NotificationSettingTableViewCell`.
    static let s5NotificationSettingTableViewCell = _R.nib._S5NotificationSettingTableViewCell()
    /// Nib `S5NotificationSettingViewController`.
    static let s5NotificationSettingViewController = _R.nib._S5NotificationSettingViewController()
    /// Nib `S5SleepChartCollectionViewCell`.
    static let s5SleepChartCollectionViewCell = _R.nib._S5SleepChartCollectionViewCell()
    /// Nib `S5SleepDetailTableViewCell`.
    static let s5SleepDetailTableViewCell = _R.nib._S5SleepDetailTableViewCell()
    /// Nib `S5SleepDetailViewController`.
    static let s5SleepDetailViewController = _R.nib._S5SleepDetailViewController()
    /// Nib `S5SleepTableViewCell`.
    static let s5SleepTableViewCell = _R.nib._S5SleepTableViewCell()
    /// Nib `S5SmartWatchDeviceTBVCell`.
    static let s5SmartWatchDeviceTBVCell = _R.nib._S5SmartWatchDeviceTBVCell()
    /// Nib `S5SmartWatchSettingViewController`.
    static let s5SmartWatchSettingViewController = _R.nib._S5SmartWatchSettingViewController()
    /// Nib `S5SpO2ChartCollectionViewCell`.
    static let s5SpO2ChartCollectionViewCell = _R.nib._S5SpO2ChartCollectionViewCell()
    /// Nib `S5SpO2DetailTableViewCell`.
    static let s5SpO2DetailTableViewCell = _R.nib._S5SpO2DetailTableViewCell()
    /// Nib `S5SpO2TableViewCell`.
    static let s5SpO2TableViewCell = _R.nib._S5SpO2TableViewCell()
    /// Nib `S5Spo2DetailViewController`.
    static let s5Spo2DetailViewController = _R.nib._S5Spo2DetailViewController()
    /// Nib `S5StepActivityTBVCell`.
    static let s5StepActivityTBVCell = _R.nib._S5StepActivityTBVCell()
    /// Nib `S5TemperatureChartCollectionViewCell`.
    static let s5TemperatureChartCollectionViewCell = _R.nib._S5TemperatureChartCollectionViewCell()
    /// Nib `S5TemperatureDetailTableViewCell`.
    static let s5TemperatureDetailTableViewCell = _R.nib._S5TemperatureDetailTableViewCell()
    /// Nib `S5TemperatureDetailViewController`.
    static let s5TemperatureDetailViewController = _R.nib._S5TemperatureDetailViewController()
    /// Nib `S5TenperatureTableViewCell`.
    static let s5TenperatureTableViewCell = _R.nib._S5TenperatureTableViewCell()
    /// Nib `S5WatchFaceCLVCell`.
    static let s5WatchFaceCLVCell = _R.nib._S5WatchFaceCLVCell()
    /// Nib `S5WatchFaceSettingViewController`.
    static let s5WatchFaceSettingViewController = _R.nib._S5WatchFaceSettingViewController()
    /// Nib `S5WaterRemindTableViewCell`.
    static let s5WaterRemindTableViewCell = _R.nib._S5WaterRemindTableViewCell()
    /// Nib `S5WaterSettingViewController`.
    static let s5WaterSettingViewController = _R.nib._S5WaterSettingViewController()
    /// Nib `SKTimeFilterView`.
    static let skTimeFilterView = _R.nib._SKTimeFilterView()
    /// Nib `ScaleActivityTableViewCell`.
    static let scaleActivityTableViewCell = _R.nib._ScaleActivityTableViewCell()
    /// Nib `ScaleResultCollectionChart`.
    static let scaleResultCollectionChart = _R.nib._ScaleResultCollectionChart()
    /// Nib `ScaleResultDetailViewController`.
    static let scaleResultDetailViewController = _R.nib._ScaleResultDetailViewController()
    /// Nib `ScaleResultRulerChart`.
    static let scaleResultRulerChart = _R.nib._ScaleResultRulerChart()
    /// Nib `ScaleResultViewController`.
    static let scaleResultViewController = _R.nib._ScaleResultViewController()
    /// Nib `ScaleViewController`.
    static let scaleViewController = _R.nib._ScaleViewController()
    /// Nib `SettingViewController`.
    static let settingViewController = _R.nib._SettingViewController()
    /// Nib `SignificanceTBVCell`.
    static let significanceTBVCell = _R.nib._SignificanceTBVCell()
    /// Nib `SmartWatchExerciseViewController`.
    static let smartWatchExerciseViewController = _R.nib._SmartWatchExerciseViewController()
    /// Nib `SmartWatchS5ViewController`.
    static let smartWatchS5ViewController = _R.nib._SmartWatchS5ViewController()
    /// Nib `SpO2DetailValueViewController`.
    static let spO2DetailValueViewController = _R.nib._SpO2DetailValueViewController()
    /// Nib `SpO2MarkerView`.
    static let spO2MarkerView = _R.nib._SpO2MarkerView()
    /// Nib `SpO2TableViewCell`.
    static let spO2TableViewCell = _R.nib._SpO2TableViewCell()
    /// Nib `SpO2ViewController`.
    static let spO2ViewController = _R.nib._SpO2ViewController()
    /// Nib `SportTableViewCell`.
    static let sportTableViewCell = _R.nib._SportTableViewCell()
    /// Nib `StartViewController`.
    static let startViewController = _R.nib._StartViewController()
    /// Nib `SyncSettingViewController`.
    static let syncSettingViewController = _R.nib._SyncSettingViewController()
    /// Nib `SyncTableViewCell`.
    static let syncTableViewCell = _R.nib._SyncTableViewCell()
    /// Nib `SyncViewController`.
    static let syncViewController = _R.nib._SyncViewController()
    /// Nib `SyntheticCategoriesTableViewCell`.
    static let syntheticCategoriesTableViewCell = _R.nib._SyntheticCategoriesTableViewCell()
    /// Nib `SyntheticTableViewCell`.
    static let syntheticTableViewCell = _R.nib._SyntheticTableViewCell()
    /// Nib `ThermometerViewController`.
    static let thermometerViewController = _R.nib._ThermometerViewController()
    /// Nib `TrackingViewController`.
    static let trackingViewController = _R.nib._TrackingViewController()
    /// Nib `WeightActivityTableViewCell`.
    static let weightActivityTableViewCell = _R.nib._WeightActivityTableViewCell()
    /// Nib `WeightDetailsCollectionViewCell`.
    static let weightDetailsCollectionViewCell = _R.nib._WeightDetailsCollectionViewCell()
    /// Nib `WeightMeasuringViewController`.
    static let weightMeasuringViewController = _R.nib._WeightMeasuringViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddDeviceCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addDeviceCollectionViewCell) instead")
    static func addDeviceCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addDeviceCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddProfileCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addProfileCollectionViewCell) instead")
    static func addProfileCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addProfileCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AlertViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alertViewController) instead")
    static func alertViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alertViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BiolightDeviceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.biolightDeviceTableViewCell) instead")
    static func biolightDeviceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.biolightDeviceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BloodPressureGraphView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bloodPressureGraphView) instead")
    static func bloodPressureGraphView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bloodPressureGraphView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BloodPressureResultViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bloodPressureResultViewController) instead")
    static func bloodPressureResultViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bloodPressureResultViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BloodPressureViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bloodPressureViewController) instead")
    static func bloodPressureViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bloodPressureViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BodyTypeCollecionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bodyTypeCollecionViewCell) instead")
    static func bodyTypeCollecionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bodyTypeCollecionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateDefautlsProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createDefautlsProfileViewController) instead")
    static func createDefautlsProfileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createDefautlsProfileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeviceCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deviceCollectionViewCell) instead")
    static func deviceCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeviceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deviceTableViewCell) instead")
    static func deviceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeviceViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deviceViewController) instead")
    static func deviceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DownloadDataViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.downloadDataViewController) instead")
    static func downloadDataViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.downloadDataViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExcerciseActivityTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.excerciseActivityTBVCell) instead")
    static func excerciseActivityTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.excerciseActivityTBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExcerciseChartCLVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.excerciseChartCLVCell) instead")
    static func excerciseChartCLVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.excerciseChartCLVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExcerciseDetailWMYTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.excerciseDetailWMYTableViewCell) instead")
    static func excerciseDetailWMYTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.excerciseDetailWMYTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExerciseDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.exerciseDetailTableViewCell) instead")
    static func exerciseDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exerciseDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HealthProfileDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.healthProfileDetailsViewController) instead")
    static func healthProfileDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.healthProfileDetailsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryBpResultTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyBpResultTBVCell) instead")
    static func historyBpResultTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyBpResultTBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryWeightResultTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyWeightResultTableViewCell) instead")
    static func historyWeightResultTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyWeightResultTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IntroduceViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.introduceViewController) instead")
    static func introduceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.introduceViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainHomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainHomeViewController) instead")
    static func mainHomeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainHomeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainTabbarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainTabbarViewController) instead")
    static func mainTabbarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainTabbarViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MeasurementCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.measurementCollectionViewCell) instead")
    static func measurementCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.measurementCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationTableViewCell) instead")
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationViewController) instead")
    static func notificationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickerViewController) instead")
    static func pickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileCollectionViewCell) instead")
    static func profileCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileListViewController) instead")
    static func profileListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileTableViewCell) instead")
    static func profileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5BloodPressureChartCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5BloodPressureChartCollectionViewCell) instead")
    static func s5BloodPressureChartCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5BloodPressureChartCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5BloodPressureDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5BloodPressureDetailTableViewCell) instead")
    static func s5BloodPressureDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5BloodPressureDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5BloodPressureDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5BloodPressureDetailViewController) instead")
    static func s5BloodPressureDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5BloodPressureDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5BloodPressureTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5BloodPressureTableViewCell) instead")
    static func s5BloodPressureTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5BloodPressureTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5DeviceSettingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5DeviceSettingTableViewCell) instead")
    static func s5DeviceSettingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5DeviceSettingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5ExerciseTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5ExerciseTableViewCell) instead")
    static func s5ExerciseTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5ExerciseTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5GoalViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5GoalViewController) instead")
    static func s5GoalViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5GoalViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5HeartRateChartCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5HeartRateChartCollectionViewCell) instead")
    static func s5HeartRateChartCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5HeartRateChartCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5HeartRateDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5HeartRateDetailTableViewCell) instead")
    static func s5HeartRateDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5HeartRateDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5HeartRateDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5HeartRateDetailViewController) instead")
    static func s5HeartRateDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5HeartRateDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5HeartRateTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5HeartRateTableViewCell) instead")
    static func s5HeartRateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5HeartRateTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5NotificationSettingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5NotificationSettingTableViewCell) instead")
    static func s5NotificationSettingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5NotificationSettingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5NotificationSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5NotificationSettingViewController) instead")
    static func s5NotificationSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5NotificationSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SleepChartCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SleepChartCollectionViewCell) instead")
    static func s5SleepChartCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SleepChartCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SleepDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SleepDetailTableViewCell) instead")
    static func s5SleepDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SleepDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SleepDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SleepDetailViewController) instead")
    static func s5SleepDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SleepDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SleepTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SleepTableViewCell) instead")
    static func s5SleepTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SleepTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SmartWatchDeviceTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SmartWatchDeviceTBVCell) instead")
    static func s5SmartWatchDeviceTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SmartWatchDeviceTBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SmartWatchSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SmartWatchSettingViewController) instead")
    static func s5SmartWatchSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SmartWatchSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SpO2ChartCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SpO2ChartCollectionViewCell) instead")
    static func s5SpO2ChartCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SpO2ChartCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SpO2DetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SpO2DetailTableViewCell) instead")
    static func s5SpO2DetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SpO2DetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5SpO2TableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5SpO2TableViewCell) instead")
    static func s5SpO2TableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5SpO2TableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5Spo2DetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5Spo2DetailViewController) instead")
    static func s5Spo2DetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5Spo2DetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5StepActivityTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5StepActivityTBVCell) instead")
    static func s5StepActivityTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5StepActivityTBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5TemperatureChartCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5TemperatureChartCollectionViewCell) instead")
    static func s5TemperatureChartCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5TemperatureChartCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5TemperatureDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5TemperatureDetailTableViewCell) instead")
    static func s5TemperatureDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5TemperatureDetailTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5TemperatureDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5TemperatureDetailViewController) instead")
    static func s5TemperatureDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5TemperatureDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5TenperatureTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5TenperatureTableViewCell) instead")
    static func s5TenperatureTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5TenperatureTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5WatchFaceCLVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5WatchFaceCLVCell) instead")
    static func s5WatchFaceCLVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5WatchFaceCLVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5WatchFaceSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5WatchFaceSettingViewController) instead")
    static func s5WatchFaceSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5WatchFaceSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5WaterRemindTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5WaterRemindTableViewCell) instead")
    static func s5WaterRemindTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5WaterRemindTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "S5WaterSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.s5WaterSettingViewController) instead")
    static func s5WaterSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.s5WaterSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKTimeFilterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skTimeFilterView) instead")
    static func skTimeFilterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skTimeFilterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScaleActivityTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scaleActivityTableViewCell) instead")
    static func scaleActivityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scaleActivityTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScaleResultCollectionChart", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scaleResultCollectionChart) instead")
    static func scaleResultCollectionChart(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scaleResultCollectionChart)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScaleResultDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scaleResultDetailViewController) instead")
    static func scaleResultDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scaleResultDetailViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScaleResultRulerChart", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scaleResultRulerChart) instead")
    static func scaleResultRulerChart(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scaleResultRulerChart)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScaleResultViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scaleResultViewController) instead")
    static func scaleResultViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scaleResultViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScaleViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scaleViewController) instead")
    static func scaleViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scaleViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingViewController) instead")
    static func settingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SignificanceTBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.significanceTBVCell) instead")
    static func significanceTBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.significanceTBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SmartWatchExerciseViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.smartWatchExerciseViewController) instead")
    static func smartWatchExerciseViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.smartWatchExerciseViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SmartWatchS5ViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.smartWatchS5ViewController) instead")
    static func smartWatchS5ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.smartWatchS5ViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpO2DetailValueViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.spO2DetailValueViewController) instead")
    static func spO2DetailValueViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.spO2DetailValueViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpO2MarkerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.spO2MarkerView) instead")
    static func spO2MarkerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.spO2MarkerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpO2TableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.spO2TableViewCell) instead")
    static func spO2TableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.spO2TableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SpO2ViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.spO2ViewController) instead")
    static func spO2ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.spO2ViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SportTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sportTableViewCell) instead")
    static func sportTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sportTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.startViewController) instead")
    static func startViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.startViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SyncSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syncSettingViewController) instead")
    static func syncSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syncSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SyncTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syncTableViewCell) instead")
    static func syncTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syncTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SyncViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syncViewController) instead")
    static func syncViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syncViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SyntheticCategoriesTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syntheticCategoriesTableViewCell) instead")
    static func syntheticCategoriesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syntheticCategoriesTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SyntheticTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.syntheticTableViewCell) instead")
    static func syntheticTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.syntheticTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ThermometerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.thermometerViewController) instead")
    static func thermometerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.thermometerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TrackingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trackingViewController) instead")
    static func trackingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trackingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeightActivityTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weightActivityTableViewCell) instead")
    static func weightActivityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weightActivityTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeightDetailsCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weightDetailsCollectionViewCell) instead")
    static func weightDetailsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weightDetailsCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeightMeasuringViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weightMeasuringViewController) instead")
    static func weightMeasuringViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weightMeasuringViewController)
    }
    #endif

    static func addDeviceCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddDeviceCollectionViewCell? {
      return R.nib.addDeviceCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddDeviceCollectionViewCell
    }

    static func addProfileCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddProfileCollectionViewCell? {
      return R.nib.addProfileCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddProfileCollectionViewCell
    }

    static func alertViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.alertViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func biolightDeviceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BiolightDeviceTableViewCell? {
      return R.nib.biolightDeviceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BiolightDeviceTableViewCell
    }

    static func bloodPressureGraphView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bloodPressureGraphView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func bloodPressureResultViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bloodPressureResultViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func bloodPressureViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bloodPressureViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func bodyTypeCollecionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BodyTypeCollecionViewCell? {
      return R.nib.bodyTypeCollecionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BodyTypeCollecionViewCell
    }

    static func createDefautlsProfileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createDefautlsProfileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func deviceCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceCollectionViewCell? {
      return R.nib.deviceCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceCollectionViewCell
    }

    static func deviceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceTableViewCell? {
      return R.nib.deviceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceTableViewCell
    }

    static func deviceViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.deviceViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func downloadDataViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.downloadDataViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func excerciseActivityTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExcerciseActivityTBVCell? {
      return R.nib.excerciseActivityTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExcerciseActivityTBVCell
    }

    static func excerciseChartCLVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExcerciseChartCLVCell? {
      return R.nib.excerciseChartCLVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExcerciseChartCLVCell
    }

    static func excerciseDetailWMYTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExcerciseDetailWMYTableViewCell? {
      return R.nib.excerciseDetailWMYTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExcerciseDetailWMYTableViewCell
    }

    static func exerciseDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExerciseDetailTableViewCell? {
      return R.nib.exerciseDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExerciseDetailTableViewCell
    }

    static func healthProfileDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.healthProfileDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func historyBpResultTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryBpResultTBVCell? {
      return R.nib.historyBpResultTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryBpResultTBVCell
    }

    static func historyWeightResultTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryWeightResultTableViewCell? {
      return R.nib.historyWeightResultTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryWeightResultTableViewCell
    }

    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func introduceViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.introduceViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainHomeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainHomeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainTabbarViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainTabbarViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func measurementCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeasurementCollectionViewCell? {
      return R.nib.measurementCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeasurementCollectionViewCell
    }

    static func notificationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
      return R.nib.notificationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
    }

    static func notificationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pickerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pickerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCollectionViewCell? {
      return R.nib.profileCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCollectionViewCell
    }

    static func profileListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
      return R.nib.profileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
    }

    static func s5BloodPressureChartCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5BloodPressureChartCollectionViewCell? {
      return R.nib.s5BloodPressureChartCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5BloodPressureChartCollectionViewCell
    }

    static func s5BloodPressureDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5BloodPressureDetailTableViewCell? {
      return R.nib.s5BloodPressureDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5BloodPressureDetailTableViewCell
    }

    static func s5BloodPressureDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5BloodPressureDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5BloodPressureTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5BloodPressureTableViewCell? {
      return R.nib.s5BloodPressureTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5BloodPressureTableViewCell
    }

    static func s5DeviceSettingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5DeviceSettingTableViewCell? {
      return R.nib.s5DeviceSettingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5DeviceSettingTableViewCell
    }

    static func s5ExerciseTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5ExerciseTableViewCell? {
      return R.nib.s5ExerciseTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5ExerciseTableViewCell
    }

    static func s5GoalViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5GoalViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5HeartRateChartCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5HeartRateChartCollectionViewCell? {
      return R.nib.s5HeartRateChartCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5HeartRateChartCollectionViewCell
    }

    static func s5HeartRateDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5HeartRateDetailTableViewCell? {
      return R.nib.s5HeartRateDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5HeartRateDetailTableViewCell
    }

    static func s5HeartRateDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5HeartRateDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5HeartRateTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5HeartRateTableViewCell? {
      return R.nib.s5HeartRateTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5HeartRateTableViewCell
    }

    static func s5NotificationSettingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5NotificationSettingTableViewCell? {
      return R.nib.s5NotificationSettingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5NotificationSettingTableViewCell
    }

    static func s5NotificationSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5NotificationSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5SleepChartCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SleepChartCollectionViewCell? {
      return R.nib.s5SleepChartCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SleepChartCollectionViewCell
    }

    static func s5SleepDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SleepDetailTableViewCell? {
      return R.nib.s5SleepDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SleepDetailTableViewCell
    }

    static func s5SleepDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5SleepDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5SleepTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SleepTableViewCell? {
      return R.nib.s5SleepTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SleepTableViewCell
    }

    static func s5SmartWatchDeviceTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SmartWatchDeviceTBVCell? {
      return R.nib.s5SmartWatchDeviceTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SmartWatchDeviceTBVCell
    }

    static func s5SmartWatchSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5SmartWatchSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5SpO2ChartCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SpO2ChartCollectionViewCell? {
      return R.nib.s5SpO2ChartCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SpO2ChartCollectionViewCell
    }

    static func s5SpO2DetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SpO2DetailTableViewCell? {
      return R.nib.s5SpO2DetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SpO2DetailTableViewCell
    }

    static func s5SpO2TableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SpO2TableViewCell? {
      return R.nib.s5SpO2TableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SpO2TableViewCell
    }

    static func s5Spo2DetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5Spo2DetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5StepActivityTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5StepActivityTBVCell? {
      return R.nib.s5StepActivityTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5StepActivityTBVCell
    }

    static func s5TemperatureChartCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5TemperatureChartCollectionViewCell? {
      return R.nib.s5TemperatureChartCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5TemperatureChartCollectionViewCell
    }

    static func s5TemperatureDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5TemperatureDetailTableViewCell? {
      return R.nib.s5TemperatureDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5TemperatureDetailTableViewCell
    }

    static func s5TemperatureDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5TemperatureDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5TenperatureTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5TenperatureTableViewCell? {
      return R.nib.s5TenperatureTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5TenperatureTableViewCell
    }

    static func s5WatchFaceCLVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5WatchFaceCLVCell? {
      return R.nib.s5WatchFaceCLVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5WatchFaceCLVCell
    }

    static func s5WatchFaceSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5WatchFaceSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func s5WaterRemindTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5WaterRemindTableViewCell? {
      return R.nib.s5WaterRemindTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5WaterRemindTableViewCell
    }

    static func s5WaterSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.s5WaterSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scaleActivityTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScaleActivityTableViewCell? {
      return R.nib.scaleActivityTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScaleActivityTableViewCell
    }

    static func scaleResultCollectionChart(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scaleResultCollectionChart.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scaleResultDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scaleResultDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scaleResultRulerChart(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scaleResultRulerChart.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scaleResultViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scaleResultViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scaleViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scaleViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func settingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.settingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func significanceTBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignificanceTBVCell? {
      return R.nib.significanceTBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignificanceTBVCell
    }

    static func skTimeFilterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.skTimeFilterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func smartWatchExerciseViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.smartWatchExerciseViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func smartWatchS5ViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.smartWatchS5ViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func spO2DetailValueViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.spO2DetailValueViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func spO2MarkerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.spO2MarkerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func spO2TableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpO2TableViewCell? {
      return R.nib.spO2TableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpO2TableViewCell
    }

    static func spO2ViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.spO2ViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func sportTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SportTableViewCell? {
      return R.nib.sportTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SportTableViewCell
    }

    static func startViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.startViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func syncSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.syncSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func syncTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyncTableViewCell? {
      return R.nib.syncTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyncTableViewCell
    }

    static func syncViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.syncViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func syntheticCategoriesTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyntheticCategoriesTableViewCell? {
      return R.nib.syntheticCategoriesTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyntheticCategoriesTableViewCell
    }

    static func syntheticTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyntheticTableViewCell? {
      return R.nib.syntheticTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyntheticTableViewCell
    }

    static func thermometerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.thermometerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func trackingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.trackingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func weightActivityTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightActivityTableViewCell? {
      return R.nib.weightActivityTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightActivityTableViewCell
    }

    static func weightDetailsCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightDetailsCollectionViewCell? {
      return R.nib.weightDetailsCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightDetailsCollectionViewCell
    }

    static func weightMeasuringViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.weightMeasuringViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 4 localization keys.
    struct infoPlist {
      /// en translation: 1SK.Connect needs your Photos to set avatar.
      ///
      /// Locales: en, vi
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: 1SK.Connect needs your authorization to take photo to set avatar.
      ///
      /// Locales: en, vi
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: 1SK.Connect needs your consent to use the Bluetooth data transmission function in order to obtain the device data.
      ///
      /// Locales: en, vi
      static let nsBluetoothAlwaysUsageDescription = Rswift.StringResource(key: "NSBluetoothAlwaysUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: 1SK.Connect needs your consent to use the Bluetooth data transmission function in order to obtain the device data.
      ///
      /// Locales: en, vi
      static let nsBluetoothPeripheralUsageDescription = Rswift.StringResource(key: "NSBluetoothPeripheralUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)

      /// en translation: 1SK.Connect needs your Photos to set avatar.
      ///
      /// Locales: en, vi
      static func nsPhotoLibraryUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: 1SK.Connect needs your authorization to take photo to set avatar.
      ///
      /// Locales: en, vi
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: 1SK.Connect needs your consent to use the Bluetooth data transmission function in order to obtain the device data.
      ///
      /// Locales: en, vi
      static func nsBluetoothAlwaysUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSBluetoothAlwaysUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSBluetoothAlwaysUsageDescription"
        }

        return NSLocalizedString("NSBluetoothAlwaysUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: 1SK.Connect needs your consent to use the Bluetooth data transmission function in order to obtain the device data.
      ///
      /// Locales: en, vi
      static func nsBluetoothPeripheralUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSBluetoothPeripheralUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSBluetoothPeripheralUsageDescription"
        }

        return NSLocalizedString("NSBluetoothPeripheralUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 334 localization keys.
    struct localizable {
      /// en translation:  Liên kết ngay
      ///
      /// Locales: vi, en
      static let sync = Rswift.StringResource(key: "sync", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: %@ lần chạy
      ///
      /// Locales: vi, en
      static let smart_watch_s5_run_times = Rswift.StringResource(key: "smart_watch_s5_run_times", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: (tb/ngày)
      ///
      /// Locales: vi, en
      static let smart_watch_s5_avg_per_day = Rswift.StringResource(key: "smart_watch_s5_avg_per_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: -- giờ -- phút
      ///
      /// Locales: vi, en
      static let hourAndMinuteEmty = Rswift.StringResource(key: "hourAndMinuteEmty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: 1SK
      ///
      /// Locales: vi, en
      static let scale_result_detail_1sk = Rswift.StringResource(key: "scale_result_detail_1sk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: 7 ngày qua
      ///
      /// Locales: vi, en
      static let smart_watch_s5_7_days = Rswift.StringResource(key: "smart_watch_s5_7_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: BMI
      ///
      /// Locales: vi, en
      static let bmi = Rswift.StringResource(key: "bmi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: BMR
      ///
      /// Locales: vi, en
      static let bmr = Rswift.StringResource(key: "bmr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Body Age
      ///
      /// Locales: vi, en
      static let bodyAge = Rswift.StringResource(key: "bodyAge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Báo thức
      ///
      /// Locales: vi, en
      static let s5_setting_type_alarm = Rswift.StringResource(key: "s5_setting_type_alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo
      ///
      /// Locales: vi, en
      static let fat = Rswift.StringResource(key: "fat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo chắc
      ///
      /// Locales: vi, en
      static let muscleFat = Rswift.StringResource(key: "muscleFat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo phì
      ///
      /// Locales: vi, en
      static let obesFat = Rswift.StringResource(key: "obesFat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo phì không chỉ ảnh hưởng đến ngoại hình mà còn tác động tiêu cực đến sức khỏe, tăng nguy cơ mắc những bệnh về tim mạch, tiểu đường, huyết áp cao,... Có thể đánh giá mức độ thừa cân, béo phì theo chỉ số BMI
      ///
      /// Locales: vi, en
      static let scale_result_detail_obesity_level_description = Rswift.StringResource(key: "scale_result_detail_obesity_level_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo phì độ 1
      ///
      /// Locales: vi, en
      static let overWeightLevel1 = Rswift.StringResource(key: "overWeightLevel1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo phì độ 2
      ///
      /// Locales: vi, en
      static let overWeightLevel2 = Rswift.StringResource(key: "overWeightLevel2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo phì độ 3
      ///
      /// Locales: vi, en
      static let overWeightLevel3 = Rswift.StringResource(key: "overWeightLevel3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Béo ẩn
      ///
      /// Locales: vi, en
      static let lFatMuscle = Rswift.StringResource(key: "lFatMuscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bình thường
      ///
      /// Locales: vi, en
      static let normal = Rswift.StringResource(key: "normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bơi
      ///
      /// Locales: vi, en
      static let swimming = Rswift.StringResource(key: "swimming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bước chân
      ///
      /// Locales: vi, en
      static let step = Rswift.StringResource(key: "step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn chưa liên kết với thiết bị đo nào.
      ///
      /// Locales: vi, en
      static let youDoNotHaveAnyDevice = Rswift.StringResource(key: "youDoNotHaveAnyDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn có chắc chắn muốn bỏ liên kết với thiết bị này?
      ///
      /// Locales: vi, en
      static let unlinkDeviceConfirmMessage = Rswift.StringResource(key: "unlinkDeviceConfirmMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn có chắc chắn muốn ngắt kết nối?
      ///
      /// Locales: vi, en
      static let alert_message_unlink = Rswift.StringResource(key: "alert_message_unlink", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn có chắc chắn muốn xóa hồ sơ này?
      ///
      /// Locales: vi, en
      static let deleteProfileConfirmMessage = Rswift.StringResource(key: "deleteProfileConfirmMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn có cử động người trong khi đo, thiết bị không trả về kết quả. Bạn hãy ngồi đúng tư thế và thực hiện lại phép đo
      ///
      /// Locales: vi, en
      static let biolight_error_movement = Rswift.StringResource(key: "biolight_error_movement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn hãy bật nhắc nhở uống nước để nhận thông báo trên vòng đeo sức khỏe.
      ///
      /// Locales: vi, en
      static let s5_water_setting_remind_title = Rswift.StringResource(key: "s5_water_setting_remind_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn phải liên kết tài khoản để bật tính năng này
      ///
      /// Locales: vi, en
      static let alert_message_link = Rswift.StringResource(key: "alert_message_link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn vui lòng kiểm tra kết nối mạng.
      ///
      /// Locales: vi, en
      static let internet_error_not_connect = Rswift.StringResource(key: "internet_error_not_connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn đã huỷ liên kết với thiết bị
      ///
      /// Locales: vi, en
      static let deviceIsUnPaired = Rswift.StringResource(key: "deviceIsUnPaired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bạn đã đạt quá giới hạn cân
      ///
      /// Locales: vi, en
      static let overWeightMessage = Rswift.StringResource(key: "overWeightMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bật
      ///
      /// Locales: vi, en
      static let smart_watch_s5_is_on = Rswift.StringResource(key: "smart_watch_s5_is_on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bật Bluetooth để 1SK.Connect có thể kết nối với thiết bị của bạn.
      ///
      /// Locales: vi, en
      static let turnOnBluetoothMessage = Rswift.StringResource(key: "turnOnBluetoothMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bật Bluetooth để cho phép 1SK.Connect liên kết với thiết bị của bạn.
      ///
      /// Locales: vi, en
      static let turnOnBluetoothMessageForLinkDevice = Rswift.StringResource(key: "turnOnBluetoothMessageForLinkDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bật thông báo để cho phép trình theo dõi gửi thông báo. Nếu vòng đeo tay không nhận được tin nhắn nhắc nhở, vui lòng mở lại quyền thông báo của ứng dụng 1SK.Connect
      ///
      /// Locales: vi, en
      static let s5_setting_type_notice_title = Rswift.StringResource(key: "s5_setting_type_notice_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bật tính năng thông báo
      ///
      /// Locales: vi, en
      static let turnOnNotification = Rswift.StringResource(key: "turnOnNotification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bỏ giày và tất trước khi đứng lên cân để được kết quả phân tích chính xác nhất.
      ///
      /// Locales: vi, en
      static let removeShoes = Rswift.StringResource(key: "removeShoes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bỏ kết nối
      ///
      /// Locales: vi, en
      static let disconnect = Rswift.StringResource(key: "disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Bố đẻ
      ///
      /// Locales: vi, en
      static let father = Rswift.StringResource(key: "father", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: CHỈ SỐ MỚI NHẤT
      ///
      /// Locales: vi, en
      static let lastestInfo = Rswift.StringResource(key: "lastestInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: CN
      ///
      /// Locales: vi, en
      static let sunday = Rswift.StringResource(key: "sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Calo
      ///
      /// Locales: vi, en
      static let smart_watch_s5_calo = Rswift.StringResource(key: "smart_watch_s5_calo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Calo tiêu thụ trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static let sm_excercise_average_kcal = Rswift.StringResource(key: "sm_excercise_average_kcal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Calo tiêu thụ trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static let sm_excercise_average_kcal_month = Rswift.StringResource(key: "sm_excercise_average_kcal_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cao
      ///
      /// Locales: vi, en
      static let high = Rswift.StringResource(key: "high", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chi tiết dữ liệu
      ///
      /// Locales: vi, en
      static let spO2_detail_value_title = Rswift.StringResource(key: "spO2_detail_value_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chiều cao
      ///
      /// Locales: vi, en
      static let height = Rswift.StringResource(key: "height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chiều cao (cm)
      ///
      /// Locales: vi, en
      static let heightCm = Rswift.StringResource(key: "heightCm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chiều cao (cm)*
      ///
      /// Locales: vi, en
      static let heightCmPlaceHolder = Rswift.StringResource(key: "heightCmPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chiều cao tối thiểu là 50 cm
      ///
      /// Locales: vi, en
      static let minHeightMessage = Rswift.StringResource(key: "minHeightMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chiều cao tối đa là 300 cm
      ///
      /// Locales: vi, en
      static let maxHeightMessage = Rswift.StringResource(key: "maxHeightMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chưa có dữ liệu
      ///
      /// Locales: vi, en
      static let doNotHaveData = Rswift.StringResource(key: "doNotHaveData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chưa có dữ liệu
      ///
      /// Locales: vi, en
      static let smart_watch_s5_has_no_data = Rswift.StringResource(key: "smart_watch_s5_has_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chưa có thông báo nào.
      ///
      /// Locales: vi, en
      static let noNotification = Rswift.StringResource(key: "noNotification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chưa kết nối
      ///
      /// Locales: vi, en
      static let disconnected = Rswift.StringResource(key: "disconnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chưa kết nối với tài khoản 1SK
      ///
      /// Locales: vi, en
      static let sync_not_link = Rswift.StringResource(key: "sync_not_link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chạy
      ///
      /// Locales: vi, en
      static let run = Rswift.StringResource(key: "run", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chạy
      ///
      /// Locales: vi, en
      static let s5_sport_type_run = Rswift.StringResource(key: "s5_sport_type_run", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chất béo cơ thể
      ///
      /// Locales: vi, en
      static let scale_result_detail_fat = Rswift.StringResource(key: "scale_result_detail_fat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số BMI
      ///
      /// Locales: vi, en
      static let scale_result_detail_bmi = Rswift.StringResource(key: "scale_result_detail_bmi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số BMI chuẩn được tính dựa trên chiều cao và cân nặng, áp dụng cho nam và nữ trưởng thành, nhằm xác định tình trạng cơ thể đang ở mức ổn định, suy dinh dưỡng hay béo phì. BMI lý tưởng của người Việt Nam (cả nam và nữ) là từ 18,5 đến 22,9. Người có BMI trong khoảng này nhưng cơ thể nhiều chất béo được xác định là “béo phì ẩn”
      ///
      /// Locales: vi, en
      static let scale_result_detail_bmi_description = Rswift.StringResource(key: "scale_result_detail_bmi_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số BMR
      ///
      /// Locales: vi, en
      static let scale_result_detail_bmr = Rswift.StringResource(key: "scale_result_detail_bmr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số cơ
      ///
      /// Locales: vi, en
      static let scale_result_detail_muscle = Rswift.StringResource(key: "scale_result_detail_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số của bạn: 
      ///
      /// Locales: vi, en
      static let scale_result_detail_value = Rswift.StringResource(key: "scale_result_detail_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số này phân loại vóc dáng người dùng dựa vào tỷ lệ Lượng mỡ và Lượng cơ của bạn. Khi bạn hoạt động và tăng cường tập luyện, lượng mỡ cơ thể sẽ giảm, chỉ số vóc dáng cũng sẽ thay đổi rõ rệt. Ngay cả khi cân nặng của bạn không đổi, sự thay đổi về tỷ lệ lượng cơ và lượng mỡ sẽ giúp bạn khỏe mạnh hơn và giảm thiểu nguy cơ dẫn tới các vấn đề về sức khỏe.
      ///
      /// Locales: vi, en
      static let scale_result_detail_body_shape_description = Rswift.StringResource(key: "scale_result_detail_body_shape_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số thể hiện khối lượng xương trong cơ thể (xương khoáng, canxi và các khoáng chất khác). Đo khối lượng xương thường xuyên sẽ chẩn đoán tình trạng loãng xương của cơ thể. Lượng xương có quan hệ tỷ lệ thuận với lượng cơ, vì vậy, tập luyện thể thao, chế độ dinh dưỡng cân bằng và duy trì cân nặng ổn định giúp xây dựng hệ xương chắc khỏe hơn.
      ///
      /// Locales: vi, en
      static let scale_result_detail_bone_description = Rswift.StringResource(key: "scale_result_detail_bone_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số thể hiện phần trăm khối lượng chất béo so với khối tượng toàn bộ cơ thể, giúp bạn nhanh chóng xác định lượng mỡ thừa, đặc biệt là mỡ xấu đang tích tụ. Chỉ số này đánh giá tình trạng sức khỏe cũng như vóc dáng cho nam giới và phụ nữ để xây dựng kế hoạch tập luyện và dinh dưỡng phù hợp. Chỉ số này thấp cơ thể có thể bị rối loạn nội tiết Chỉ số cao dẫn đến béo phì Giữ chỉ số này ở ngưỡng tiêu chuẩn với kế hoạch tập luyện và dinh dưỡng phù hợp cho bạn sức khỏe hoàn hảo, thân hình săn chắc, hấp dẫn
      ///
      /// Locales: vi, en
      static let scale_result_detail_fat_description = Rswift.StringResource(key: "scale_result_detail_fat_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số đo
      ///
      /// Locales: vi, en
      static let measurementIndex = Rswift.StringResource(key: "measurementIndex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chỉ số đề cập đến số đo trọng lượng cơ thể mà không có gì trên người. Cân nặng cơ thể là một chỉ số cơ bản nhưng góp phần quan trọng trong quá trình phân tích thành phần cơ thể. Bạn có thể biết tình trạng sức khỏe dựa trên sự thay đổi cân nặng trong một khoảng thời gian cụ thể.
      ///
      /// Locales: vi, en
      static let scale_result_detail_weight_description = Rswift.StringResource(key: "scale_result_detail_weight_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chọn mối quan hệ
      ///
      /// Locales: vi, en
      static let chooseRelationship = Rswift.StringResource(key: "chooseRelationship", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chọn ngày sinh
      ///
      /// Locales: vi, en
      static let chooseBirthday = Rswift.StringResource(key: "chooseBirthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chọn nhóm máu
      ///
      /// Locales: vi, en
      static let chooseBloodGroup = Rswift.StringResource(key: "chooseBloodGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chọn số bước
      ///
      /// Locales: vi, en
      static let s5_setting_type_step_title = Rswift.StringResource(key: "s5_setting_type_step_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chọn ảnh từ: 
      ///
      /// Locales: vi, en
      static let chooseImageFrom = Rswift.StringResource(key: "chooseImageFrom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Chồng
      ///
      /// Locales: vi, en
      static let husband = Rswift.StringResource(key: "husband", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Con gái
      ///
      /// Locales: vi, en
      static let daughter = Rswift.StringResource(key: "daughter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Con trai
      ///
      /// Locales: vi, en
      static let son = Rswift.StringResource(key: "son", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cài đặt
      ///
      /// Locales: vi, en
      static let setting = Rswift.StringResource(key: "setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng
      ///
      /// Locales: vi, en
      static let detail_measurement_weight = Rswift.StringResource(key: "detail_measurement_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng
      ///
      /// Locales: vi, en
      static let weight = Rswift.StringResource(key: "weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng (kg)
      ///
      /// Locales: vi, en
      static let weightKg = Rswift.StringResource(key: "weightKg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng cơ thể
      ///
      /// Locales: vi, en
      static let scale_result_detail_weight = Rswift.StringResource(key: "scale_result_detail_weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng tiêu chuẩn
      ///
      /// Locales: vi, en
      static let detail_measurement_ideal = Rswift.StringResource(key: "detail_measurement_ideal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng tiêu chuẩn (kg)
      ///
      /// Locales: vi, en
      static let bodyStandard = Rswift.StringResource(key: "bodyStandard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng tối thiểu là 2 kg
      ///
      /// Locales: vi, en
      static let minWeightMessage = Rswift.StringResource(key: "minWeightMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân nặng tối đa là 200 kg
      ///
      /// Locales: vi, en
      static let maxWeightMessage = Rswift.StringResource(key: "maxWeightMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cân đối
      ///
      /// Locales: vi, en
      static let standard = Rswift.StringResource(key: "standard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Có thể trong quá trình đo thiết bị đã bị lỏng hoặc không được đeo đúng cách nên đã không trả về kết quả, bạn hãy kiểm tra và đeo lại thiết bị và thử lại để có kết quả đo chuẩn xác nhất
      ///
      /// Locales: vi, en
      static let biolight_error_device = Rswift.StringResource(key: "biolight_error_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Có, bỏ liên kết
      ///
      /// Locales: vi, en
      static let unlinkDeviceConfirm = Rswift.StringResource(key: "unlinkDeviceConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Có, xóa hồ sơ
      ///
      /// Locales: vi, en
      static let deleteProfileConfirm = Rswift.StringResource(key: "deleteProfileConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cơ
      ///
      /// Locales: vi, en
      static let detail_measurement_muscle = Rswift.StringResource(key: "detail_measurement_muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cơ (kg)
      ///
      /// Locales: vi, en
      static let muscle = Rswift.StringResource(key: "muscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cơ bắp
      ///
      /// Locales: vi, en
      static let muscular = Rswift.StringResource(key: "muscular", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cập nhật
      ///
      /// Locales: vi, en
      static let update = Rswift.StringResource(key: "update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Cập nhật dữ liệu
      ///
      /// Locales: vi, en
      static let reloadData = Rswift.StringResource(key: "reloadData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Dừng đo
      ///
      /// Locales: vi, en
      static let stop_measurement = Rswift.StringResource(key: "stop_measurement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Giấc ngủ
      ///
      /// Locales: vi, en
      static let smart_watch_s5_sleep = Rswift.StringResource(key: "smart_watch_s5_sleep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Giấc ngủ: %@
      ///
      /// Locales: vi, en
      static let smart_watch_s5_sleep_input = Rswift.StringResource(key: "smart_watch_s5_sleep_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Giới thiệu
      ///
      /// Locales: vi, en
      static let introduce = Rswift.StringResource(key: "introduce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Gầy
      ///
      /// Locales: vi, en
      static let thin = Rswift.StringResource(key: "thin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: HA Bình thường
      ///
      /// Locales: vi, en
      static let biolight_description_blood_pressure_normal = Rswift.StringResource(key: "biolight_description_blood_pressure_normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: HA Cao 1
      ///
      /// Locales: vi, en
      static let biolight_description_blood_pressure_high_1 = Rswift.StringResource(key: "biolight_description_blood_pressure_high_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: HA Cao 2
      ///
      /// Locales: vi, en
      static let biolight_description_blood_pressure_high_2 = Rswift.StringResource(key: "biolight_description_blood_pressure_high_2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: HA Thấp
      ///
      /// Locales: vi, en
      static let biolight_description_blood_pressure_low = Rswift.StringResource(key: "biolight_description_blood_pressure_low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: HA Tiền tăng
      ///
      /// Locales: vi, en
      static let biolight_description_blood_pressure_pre_hypertension = Rswift.StringResource(key: "biolight_description_blood_pressure_pre_hypertension", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp
      ///
      /// Locales: vi, en
      static let bloodPressure = Rswift.StringResource(key: "bloodPressure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp
      ///
      /// Locales: vi, en
      static let bloodpressure = Rswift.StringResource(key: "bloodpressure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp
      ///
      /// Locales: vi, en
      static let smart_watch_s5_blood_pressure = Rswift.StringResource(key: "smart_watch_s5_blood_pressure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp bình thường
      ///
      /// Locales: vi, en
      static let biolight_detail_blood_pressure_normal = Rswift.StringResource(key: "biolight_detail_blood_pressure_normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp cao nhất: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_max_bp = Rswift.StringResource(key: "smart_watch_s5_max_bp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp thấp
      ///
      /// Locales: vi, en
      static let biolight_detail_blood_pressure_low = Rswift.StringResource(key: "biolight_detail_blood_pressure_low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp thấp nhất: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_min_bp = Rswift.StringResource(key: "smart_watch_s5_min_bp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huyết áp: %@ mmHg
      ///
      /// Locales: vi, en
      static let smart_watch_s5_blood_pressure_input = Rswift.StringResource(key: "smart_watch_s5_blood_pressure_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huỷ
      ///
      /// Locales: vi, en
      static let alert_cancel = Rswift.StringResource(key: "alert_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huỷ
      ///
      /// Locales: vi, en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huỷ liên kết
      ///
      /// Locales: vi, en
      static let sync_unlink = Rswift.StringResource(key: "sync_unlink", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Huỷ mục tiêu
      ///
      /// Locales: vi, en
      static let smart_watch_s5_goal_cancel = Rswift.StringResource(key: "smart_watch_s5_goal_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Hôm nay
      ///
      /// Locales: vi, en
      static let today = Rswift.StringResource(key: "today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Họ tên
      ///
      /// Locales: vi, en
      static let fullName = Rswift.StringResource(key: "fullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Hồ sơ
      ///
      /// Locales: vi, en
      static let sync_profile = Rswift.StringResource(key: "sync_profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Hồ sơ sức khoẻ
      ///
      /// Locales: vi, en
      static let healthProfile = Rswift.StringResource(key: "healthProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khoẻ mạnh
      ///
      /// Locales: vi, en
      static let healthy = Rswift.StringResource(key: "healthy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khác
      ///
      /// Locales: vi, en
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khôi phục cài đặt gốc
      ///
      /// Locales: vi, en
      static let s5_setting_type_s5_reset = Rswift.StringResource(key: "s5_setting_type_s5_reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khôi phục cài đặt gốc
      ///
      /// Locales: vi, en
      static let smart_watch_s5_reset = Rswift.StringResource(key: "smart_watch_s5_reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Không
      ///
      /// Locales: vi, en
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Không thể kết nối với thiết bị
      ///
      /// Locales: vi, en
      static let canNotConnectToDevice = Rswift.StringResource(key: "canNotConnectToDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Không tìm thấy thiết bị nào. Vui lòng đảm bảo thiết bị cần kết nối đã được bật và đặt trong phạm vi có thể liên kết.
      ///
      /// Locales: vi, en
      static let notFoundAnyDeviceMessage = Rswift.StringResource(key: "notFoundAnyDeviceMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khỏe mạnh
      ///
      /// Locales: vi, en
      static let scale_result_healthy_description = Rswift.StringResource(key: "scale_result_healthy_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khối lượng cơ bao gồm khối lượng các cơ xương, cơ trơn như cơ tim, cơ hệ tiêu hóa và nước chứa trong các tế bào cơ. Tăng cường khối lượng cơ sẽ giúp tỷ lệ trao đổi chất cơ bản BMR tăng lên, giúp giảm lượng mỡ thừa trong cơ thể và giảm cân một cách lành mạnh.
      ///
      /// Locales: vi, en
      static let scale_result_detail_muscle_description = Rswift.StringResource(key: "scale_result_detail_muscle_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khối lượng cơ thể săn chắc
      ///
      /// Locales: vi, en
      static let scale_result_detail_lbw = Rswift.StringResource(key: "scale_result_detail_lbw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khối lượng cơ thể săn chắc (kg)
      ///
      /// Locales: vi, en
      static let lbw = Rswift.StringResource(key: "lbw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Khối lượng xương
      ///
      /// Locales: vi, en
      static let scale_result_detail_bone = Rswift.StringResource(key: "scale_result_detail_bone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Kết nối
      ///
      /// Locales: vi, en
      static let connect = Rswift.StringResource(key: "connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Kết quả đo
      ///
      /// Locales: vi, en
      static let measuringResult = Rswift.StringResource(key: "measuringResult", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Leo núi
      ///
      /// Locales: vi, en
      static let s5_sport_type_climb = Rswift.StringResource(key: "s5_sport_type_climb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Liên kết bị lỗi
      ///
      /// Locales: vi, en
      static let sync_link_failed = Rswift.StringResource(key: "sync_link_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Liên kết thiết bị
      ///
      /// Locales: vi, en
      static let linkDevice = Rswift.StringResource(key: "linkDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Liên kết tài khoản
      ///
      /// Locales: vi, en
      static let sync_link_account = Rswift.StringResource(key: "sync_link_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Liên kết với thiết bị đo để theo dõi và nhận thông báo về các chỉ số sức khoẻ của bạn.
      ///
      /// Locales: vi, en
      static let linkFirstDeviceMessage = Rswift.StringResource(key: "linkFirstDeviceMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Loại thiết bị này đã được liên kết
      ///
      /// Locales: vi, en
      static let linked_device = Rswift.StringResource(key: "linked_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Là khối lượng tương ứng phù hợp với chiều cao của mỗi người. Duy trì trọng lượng chuẩn giúp tránh một số vấn đề sức khỏe nghiêm trọng như: béo phì, tăng huyết áp, tiểu đường, suy dinh dưỡng...
      ///
      /// Locales: vi, en
      static let scale_result_detail_ideal_description = Rswift.StringResource(key: "scale_result_detail_ideal_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Là lượng mỡ nằm ngay bên dưới da giúp cơ thể dự trữ năng lượng và điều chỉnh thân nhiệt, tỷ lệ này khác nhau phụ thuộc vào gen di truyền cũng như là các yếu tố về lối sống như mức độ hoạt động thể chất và chế độ ăn uống của mỗi người. Mỡ dưới da có chức năng như 1 lớp đệm để bảo vệ cơ và xương khỏi tác động của các cú va chạm từ bên ngoài như ngã, va đập,...
      ///
      /// Locales: vi, en
      static let scale_result_detail_subcutaneous_fat_description = Rswift.StringResource(key: "scale_result_detail_subcutaneous_fat_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Là thành phần dinh dưỡng quan trọng cấu tạo nên các bộ phận của cơ thể. Protein không chỉ giúp cơ thể khỏe mạnh và tăng cơ bắp mà còn tốt cho xương, sụn, máu. Thêm vào đó, protein giúp nuôi dưỡng da, tóc, móng tay và các cơ quan quan trọng trong cơ thể. Thiếu hụt Protein có thể dẫn đến suy giảm miễn dịch, thiếu máu, teo cơ. Tỷ lệ Protein trong cơ thể khỏe mạnh nằm từ 16- 20%
      ///
      /// Locales: vi, en
      static let scale_result_detail_protein_description = Rswift.StringResource(key: "scale_result_detail_protein_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Là tỉ lệ trao đổi chất cơ bản cho biết mức năng lượng (calo) tối thiếu cơ thể cần trong 24 giờ để đảm bảo hoạt động bình thường của các cơ quan (bao gồm cả trạng thái nghỉ ngơi). Chỉ số được xác định bằng năng lượng tiêu thụ bởi khối cơ bắp. Những người có BMR thường không dễ để tăng cân. Sử dụng nhiều thịt, cá và các sản phẩm từ sữa kết hợp tập thể dục có thể giúp bạn tăng khối lượng cơ
      ///
      /// Locales: vi, en
      static let scale_result_detail_bmr_description = Rswift.StringResource(key: "scale_result_detail_bmr_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Là tổng khối lượng cơ thể trừ đi tất cả khối lượng mỡ, giúp bạn đánh giá được trạng thái cơ thể, từ đó có thể điều chỉnh để giảm cân, tăng cân hoặc cải thiện một số chỉ số quan trọng phù hợp với tình trạng cơ thể. Cách tính: Trọng lượng cơ thể x (1 - tỷ lệ % mỡ cơ thể)
      ///
      /// Locales: vi, en
      static let scale_result_detail_lbw_description = Rswift.StringResource(key: "scale_result_detail_lbw_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Là tỷ lệ giữa toàn bộ lượng nước (bao gồm: nước trong máu, bạch huyết, dịch cơ thể,...) và trọng lượng cơ thể. Mất nước có thể gây ảnh hưởng tiêu cực đến sức khỏe con người. Theo dõi % lượng nước toàn phần tại một thời điểm nhất định trong ngày để đánh giá chính xác những thay đổi của cơ thể.
      ///
      /// Locales: vi, en
      static let scale_result_detail_water_description = Rswift.StringResource(key: "scale_result_detail_water_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Lưu
      ///
      /// Locales: vi, en
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Lưu ý:
      ///
      /// Locales: vi, en
      static let note = Rswift.StringResource(key: "note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Lượng nước cơ thể
      ///
      /// Locales: vi, en
      static let scale_result_detail_water = Rswift.StringResource(key: "scale_result_detail_water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: LỊCH SỬ ĐO
      ///
      /// Locales: vi, en
      static let measuringHistory = Rswift.StringResource(key: "measuringHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Lịch sử hoạt động
      ///
      /// Locales: vi, en
      static let sm_excercise_history = Rswift.StringResource(key: "sm_excercise_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Lỗi
      ///
      /// Locales: vi, en
      static let alert_error = Rswift.StringResource(key: "alert_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Lỗi dữ liệu.
      ///
      /// Locales: vi, en
      static let internet_error_data_error = Rswift.StringResource(key: "internet_error_data_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mất kết nối mạng, vui lòng kiểm tra lại.
      ///
      /// Locales: vi, en
      static let internet_error_lost_connection = Rswift.StringResource(key: "internet_error_lost_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mặt đồng hồ
      ///
      /// Locales: vi, en
      static let s5_setting_type_watch_face = Rswift.StringResource(key: "s5_setting_type_watch_face", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mẹ đẻ
      ///
      /// Locales: vi, en
      static let mother = Rswift.StringResource(key: "mother", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mối quan hệ
      ///
      /// Locales: vi, en
      static let relationship = Rswift.StringResource(key: "relationship", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mối quan hệ*
      ///
      /// Locales: vi, en
      static let relationshipPlaceHolder = Rswift.StringResource(key: "relationshipPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mở rộng
      ///
      /// Locales: vi, en
      static let smart_watch_s5_expand = Rswift.StringResource(key: "smart_watch_s5_expand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mỡ
      ///
      /// Locales: vi, en
      static let detail_measurement_fat = Rswift.StringResource(key: "detail_measurement_fat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mỡ (%)
      ///
      /// Locales: vi, en
      static let fatPercent = Rswift.StringResource(key: "fatPercent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mỡ dưới da
      ///
      /// Locales: vi, en
      static let detail_measurement_subcutaneous_fat = Rswift.StringResource(key: "detail_measurement_subcutaneous_fat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mỡ dưới da (%)
      ///
      /// Locales: vi, en
      static let subcutaneousFat = Rswift.StringResource(key: "subcutaneousFat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mỡ nội tạng
      ///
      /// Locales: vi, en
      static let visceralFat = Rswift.StringResource(key: "visceralFat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mỡ nội tạng là một loại chất béo trong cơ thể được lưu trữ trong khoang bụng. Mỡ nội tạng dư thừa làm tăng nguy cơ phát triển một số bệnh lý nghiêm trọng kéo dài. Thường xuyên theo dõi và đảm bảo chỉ số mỡ nội tạng nằm trong mức cho phép giúp bảo vệ và nâng cao sức khỏe hiệu quả.
      ///
      /// Locales: vi, en
      static let scale_result_detail_visceral_fat_description = Rswift.StringResource(key: "scale_result_detail_visceral_fat_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mục tiêu
      ///
      /// Locales: vi, en
      static let smart_watch_s5_goal = Rswift.StringResource(key: "smart_watch_s5_goal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mục tiêu nước uống hàng ngày
      ///
      /// Locales: vi, en
      static let s5_water_setting_goal = Rswift.StringResource(key: "s5_water_setting_goal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mục tiêu vận động
      ///
      /// Locales: vi, en
      static let s5_setting_type_movement_goal = Rswift.StringResource(key: "s5_setting_type_movement_goal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Mức độ béo phì
      ///
      /// Locales: vi, en
      static let obesityLevel = Rswift.StringResource(key: "obesityLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nam
      ///
      /// Locales: vi, en
      static let male = Rswift.StringResource(key: "male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nguy hiểm
      ///
      /// Locales: vi, en
      static let dangerous = Rswift.StringResource(key: "dangerous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Ngày
      ///
      /// Locales: vi, en
      static let day = Rswift.StringResource(key: "day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Ngày sinh
      ///
      /// Locales: vi, en
      static let birthday = Rswift.StringResource(key: "birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Người dùng này đã được liên kết với một tài khoản khác trước đây
      ///
      /// Locales: vi, en
      static let sync_linked = Rswift.StringResource(key: "sync_linked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Ngủ nông
      ///
      /// Locales: vi, en
      static let sleep_type_light = Rswift.StringResource(key: "sleep_type_light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Ngủ sâu
      ///
      /// Locales: vi, en
      static let sleep_type_deep = Rswift.StringResource(key: "sleep_type_deep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhiệt độ
      ///
      /// Locales: vi, en
      static let smart_watch_s5_temperature = Rswift.StringResource(key: "smart_watch_s5_temperature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhiệt độ
      ///
      /// Locales: vi, en
      static let temperature = Rswift.StringResource(key: "temperature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhiệt độ cao nhất: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_max_temp = Rswift.StringResource(key: "smart_watch_s5_max_temp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhiệt độ thấp nhất: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_min_temp = Rswift.StringResource(key: "smart_watch_s5_min_temp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhiệt độ: %@ °C
      ///
      /// Locales: vi, en
      static let smart_watch_s5_temperature_input = Rswift.StringResource(key: "smart_watch_s5_temperature_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhóm máu
      ///
      /// Locales: vi, en
      static let bloodGroup = Rswift.StringResource(key: "bloodGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhắc nhở uống nước
      ///
      /// Locales: vi, en
      static let s5_setting_type_water_reminder = Rswift.StringResource(key: "s5_setting_type_water_reminder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhắc nhở uống nước
      ///
      /// Locales: vi, en
      static let s5_water_setting_title = Rswift.StringResource(key: "s5_water_setting_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhắc nhở ít vận động
      ///
      /// Locales: vi, en
      static let s5_setting_type_sedentary_reminder = Rswift.StringResource(key: "s5_setting_type_sedentary_reminder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhịp tim
      ///
      /// Locales: vi, en
      static let heartRate = Rswift.StringResource(key: "heartRate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhịp tim
      ///
      /// Locales: vi, en
      static let smart_watch_s5_heart_rate = Rswift.StringResource(key: "smart_watch_s5_heart_rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhịp tim cao nhất: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_max_hr = Rswift.StringResource(key: "smart_watch_s5_max_hr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhịp tim nghỉ: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_min_hr = Rswift.StringResource(key: "smart_watch_s5_min_hr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhịp tim trung bình
      ///
      /// Locales: vi, en
      static let spO2_detail_value_average_pr = Rswift.StringResource(key: "spO2_detail_value_average_pr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nhịp tim: %@ bpm
      ///
      /// Locales: vi, en
      static let smart_watch_s5_heart_rate_input = Rswift.StringResource(key: "smart_watch_s5_heart_rate_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nâng cổ tay để bật màn hình
      ///
      /// Locales: vi, en
      static let s5_setting_type_turn_wrist = Rswift.StringResource(key: "s5_setting_type_turn_wrist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Năm
      ///
      /// Locales: vi, en
      static let year = Rswift.StringResource(key: "year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nước
      ///
      /// Locales: vi, en
      static let detail_measurement_water = Rswift.StringResource(key: "detail_measurement_water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nước (%)
      ///
      /// Locales: vi, en
      static let water = Rswift.StringResource(key: "water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Nữ
      ///
      /// Locales: vi, en
      static let female = Rswift.StringResource(key: "female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: vi, en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Oxy máu
      ///
      /// Locales: vi, en
      static let smart_watch_s5_spO2 = Rswift.StringResource(key: "smart_watch_s5_spO2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Oxy máu thấp nhất: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_min_spO2 = Rswift.StringResource(key: "smart_watch_s5_min_spO2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Oxy máu trung bình
      ///
      /// Locales: vi, en
      static let smart_watch_s5_average_spO2 = Rswift.StringResource(key: "smart_watch_s5_average_spO2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Oxy máu: 
      ///
      /// Locales: vi, en
      static let smart_watch_s5_max_spO2 = Rswift.StringResource(key: "smart_watch_s5_max_spO2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Oxy máu: %@
      ///
      /// Locales: vi, en
      static let smart_watch_s5_spO2_input = Rswift.StringResource(key: "smart_watch_s5_spO2_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: PR
      ///
      /// Locales: vi, en
      static let pR = Rswift.StringResource(key: "PR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Phiên bản phần mềm
      ///
      /// Locales: vi, en
      static let s5_setting_type_s5_version = Rswift.StringResource(key: "s5_setting_type_s5_version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Phép đo không thành công
      ///
      /// Locales: vi, en
      static let weightMeasuringFalseMessage = Rswift.StringResource(key: "weightMeasuringFalseMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Protein
      ///
      /// Locales: vi, en
      static let detail_measurement_protein = Rswift.StringResource(key: "detail_measurement_protein", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Protein
      ///
      /// Locales: vi, en
      static let scale_result_detail_protein = Rswift.StringResource(key: "scale_result_detail_protein", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Protein (%)
      ///
      /// Locales: vi, en
      static let protein = Rswift.StringResource(key: "protein", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Quãng đường
      ///
      /// Locales: vi, en
      static let distance = Rswift.StringResource(key: "distance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: REM
      ///
      /// Locales: vi, en
      static let sleep_type_rem = Rswift.StringResource(key: "sleep_type_rem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Rất cao
      ///
      /// Locales: vi, en
      static let veryHigh = Rswift.StringResource(key: "veryHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Rất nguy hiểm
      ///
      /// Locales: vi, en
      static let veryDangerous = Rswift.StringResource(key: "veryDangerous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Sinh hiệu
      ///
      /// Locales: vi, en
      static let significance = Rswift.StringResource(key: "significance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: SpO2
      ///
      /// Locales: vi, en
      static let spO2 = Rswift.StringResource(key: "spO2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: SpO2 thấp nhất
      ///
      /// Locales: vi, en
      static let spO2_detail_value_min = Rswift.StringResource(key: "spO2_detail_value_min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: SpO2 trung bình
      ///
      /// Locales: vi, en
      static let spO2_detail_value_average = Rswift.StringResource(key: "spO2_detail_value_average", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Số bước trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static let sm_excercise_average_step = Rswift.StringResource(key: "sm_excercise_average_step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Số bước trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static let sm_excercise_average_step_month = Rswift.StringResource(key: "sm_excercise_average_step_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Số bước đi bộ
      ///
      /// Locales: vi, en
      static let smart_watch_s5_step_count = Rswift.StringResource(key: "smart_watch_s5_step_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Số bước:
      ///
      /// Locales: vi, en
      static let sm_excercise_number_of_step = Rswift.StringResource(key: "sm_excercise_number_of_step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Số cốc
      ///
      /// Locales: vi, en
      static let s5_water_setting_cup_numbers = Rswift.StringResource(key: "s5_water_setting_cup_numbers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: T2
      ///
      /// Locales: vi, en
      static let monday = Rswift.StringResource(key: "monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: T3
      ///
      /// Locales: vi, en
      static let tuesday = Rswift.StringResource(key: "tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: T4
      ///
      /// Locales: vi, en
      static let wednesday = Rswift.StringResource(key: "wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: T5
      ///
      /// Locales: vi, en
      static let thursday = Rswift.StringResource(key: "thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: T6
      ///
      /// Locales: vi, en
      static let friday = Rswift.StringResource(key: "friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: T7
      ///
      /// Locales: vi, en
      static let saturday = Rswift.StringResource(key: "saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Theo dõi
      ///
      /// Locales: vi, en
      static let tracking = Rswift.StringResource(key: "tracking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiết bị
      ///
      /// Locales: vi, en
      static let device = Rswift.StringResource(key: "device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiết bị của tôi
      ///
      /// Locales: vi, en
      static let myDevice = Rswift.StringResource(key: "myDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiết bị không trả về kết quả do quá thời gian đo. Bạn hãy vui lòng ngồi đúng tư thế, kiểm tra và đeo lại thiết bị đo và thực hiện lại sau khi đã chuẩn bị xong
      ///
      /// Locales: vi, en
      static let biolight_error_timeout = Rswift.StringResource(key: "biolight_error_timeout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiết bị đo
      ///
      /// Locales: vi, en
      static let deviceMeasurementIndex = Rswift.StringResource(key: "deviceMeasurementIndex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiếu
      ///
      /// Locales: vi, en
      static let scale_result_short_description = Rswift.StringResource(key: "scale_result_short_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiếu cân
      ///
      /// Locales: vi, en
      static let underWeight = Rswift.StringResource(key: "underWeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thiếu vận động
      ///
      /// Locales: vi, en
      static let lackofexercise = Rswift.StringResource(key: "lackofexercise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thu gọn
      ///
      /// Locales: vi, en
      static let smart_watch_s5_collapse = Rswift.StringResource(key: "smart_watch_s5_collapse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tháng
      ///
      /// Locales: vi, en
      static let month = Rswift.StringResource(key: "month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thêm hồ sơ
      ///
      /// Locales: vi, en
      static let addProfile = Rswift.StringResource(key: "addProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thêm mới
      ///
      /// Locales: vi, en
      static let addNew = Rswift.StringResource(key: "addNew", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thêm thiết bị
      ///
      /// Locales: vi, en
      static let addDevice = Rswift.StringResource(key: "addDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thông báo
      ///
      /// Locales: vi, en
      static let notification = Rswift.StringResource(key: "notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thông báo
      ///
      /// Locales: vi, en
      static let s5_setting_type_notice = Rswift.StringResource(key: "s5_setting_type_notice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thấp
      ///
      /// Locales: vi, en
      static let low = Rswift.StringResource(key: "low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thể tích cốc nước
      ///
      /// Locales: vi, en
      static let s5_water_setting_cup_volume = Rswift.StringResource(key: "s5_water_setting_cup_volume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian
      ///
      /// Locales: vi, en
      static let time = Rswift.StringResource(key: "time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian ngủ trung bình hàng ngày %@
      ///
      /// Locales: vi, en
      static let smart_watch_s5_average_sleep_input = Rswift.StringResource(key: "smart_watch_s5_average_sleep_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian theo dõi: %@
      ///
      /// Locales: vi, en
      static let spO2_detail_value_time_measure = Rswift.StringResource(key: "spO2_detail_value_time_measure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian tập luyện
      ///
      /// Locales: vi, en
      static let sm_practice_time = Rswift.StringResource(key: "sm_practice_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian tập luyện trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static let sm_practice_avg_day = Rswift.StringResource(key: "sm_practice_avg_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian tập luyện trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static let sm_practice_avg_month = Rswift.StringResource(key: "sm_practice_avg_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian vận động
      ///
      /// Locales: vi, en
      static let sm_excersise_time = Rswift.StringResource(key: "sm_excersise_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian vận động trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static let sm_excercise_avg_day = Rswift.StringResource(key: "sm_excercise_avg_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thời gian vận động trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static let sm_excercise_avg_month = Rswift.StringResource(key: "sm_excercise_avg_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thức
      ///
      /// Locales: vi, en
      static let sleep_type_asleep = Rswift.StringResource(key: "sleep_type_asleep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thừa
      ///
      /// Locales: vi, en
      static let scale_result_excess_description = Rswift.StringResource(key: "scale_result_excess_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Thừa cân
      ///
      /// Locales: vi, en
      static let overWeight = Rswift.StringResource(key: "overWeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tiêu chuẩn
      ///
      /// Locales: vi, en
      static let scale_result_standar_description = Rswift.StringResource(key: "scale_result_standar_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tiếp
      ///
      /// Locales: vi, en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tiền tăng huyết áp
      ///
      /// Locales: vi, en
      static let biolight_detail_blood_pressure_pre_hypertension = Rswift.StringResource(key: "biolight_detail_blood_pressure_pre_hypertension", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Trang chủ
      ///
      /// Locales: vi, en
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Trung bình
      ///
      /// Locales: vi, en
      static let average = Rswift.StringResource(key: "average", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tuần
      ///
      /// Locales: vi, en
      static let week = Rswift.StringResource(key: "week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tài khoản này đã được liên kết với người dùng khác
      ///
      /// Locales: vi, en
      static let sync_linked_user = Rswift.StringResource(key: "sync_linked_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tâm thu: %@ - %@ mmHg
      ///
      /// Locales: vi, en
      static let blood_pressure_value_sys = Rswift.StringResource(key: "blood_pressure_value_sys", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tâm thu: %@ mmHg
      ///
      /// Locales: vi, en
      static let blood_pressure_value_sys_day = Rswift.StringResource(key: "blood_pressure_value_sys_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tâm trương: %@ - %@ mmHg
      ///
      /// Locales: vi, en
      static let blood_pressure_value_dia = Rswift.StringResource(key: "blood_pressure_value_dia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tâm trương: %@ mmHg
      ///
      /// Locales: vi, en
      static let blood_pressure_value_dia_day = Rswift.StringResource(key: "blood_pressure_value_dia_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tên tối thiểu phải từ 2 ký tự đổ lên
      ///
      /// Locales: vi, en
      static let minNameLengthMessage = Rswift.StringResource(key: "minNameLengthMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tìm hiểu thêm thông tin sức khỏe ở
      ///
      /// Locales: vi, en
      static let scale_result_detail_discovery = Rswift.StringResource(key: "scale_result_detail_discovery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tìm kiếm vòng đeo tay
      ///
      /// Locales: vi, en
      static let s5_setting_type_searching_s5 = Rswift.StringResource(key: "s5_setting_type_searching_s5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tìm thiết bị
      ///
      /// Locales: vi, en
      static let findDevice = Rswift.StringResource(key: "findDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tôi
      ///
      /// Locales: vi, en
      static let yourself = Rswift.StringResource(key: "yourself", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tăng huyết áp độ 1
      ///
      /// Locales: vi, en
      static let biolight_detail_blood_pressure_high_1 = Rswift.StringResource(key: "biolight_detail_blood_pressure_high_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tăng huyết áp độ 2
      ///
      /// Locales: vi, en
      static let biolight_detail_blood_pressure_high_2 = Rswift.StringResource(key: "biolight_detail_blood_pressure_high_2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: TẠO HỒ SƠ
      ///
      /// Locales: vi, en
      static let createProfile = Rswift.StringResource(key: "createProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tắt
      ///
      /// Locales: vi, en
      static let smart_watch_s5_is_off = Rswift.StringResource(key: "smart_watch_s5_is_off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tối ưu
      ///
      /// Locales: vi, en
      static let scale_result_optimal_description = Rswift.StringResource(key: "scale_result_optimal_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tốt
      ///
      /// Locales: vi, en
      static let scale_result_find_description = Rswift.StringResource(key: "scale_result_find_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tổng quãng đường:
      ///
      /// Locales: vi, en
      static let sm_excercise_total_distance = Rswift.StringResource(key: "sm_excercise_total_distance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tổng số bước hàng ngày/mục tiêu
      ///
      /// Locales: vi, en
      static let sm_excercise_total_per_day = Rswift.StringResource(key: "sm_excercise_total_per_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tổng số bước:
      ///
      /// Locales: vi, en
      static let sm_excercise_total_step = Rswift.StringResource(key: "sm_excercise_total_step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tổng thời gian ngủ: %@
      ///
      /// Locales: vi, en
      static let smart_watch_s5_total_sleep_input = Rswift.StringResource(key: "smart_watch_s5_total_sleep_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Từ %@ đến %@
      ///
      /// Locales: vi, en
      static let spO2_detail_value_from_to = Rswift.StringResource(key: "spO2_detail_value_from_to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Tự động đồng bộ dữ liệu
      ///
      /// Locales: vi, en
      static let sync_auto = Rswift.StringResource(key: "sync_auto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Uống nước rất cần thiết cho sức khỏe và ngăn ngừa mất nước. Mỗi người cần một lượng nước khác nhau. Thông thường chúng ta cần ít nhất 2L nước mỗi ngày
      ///
      /// Locales: vi, en
      static let s5_water_setting_remind = Rswift.StringResource(key: "s5_water_setting_remind", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vui lòng nhập mối quan hệ
      ///
      /// Locales: vi, en
      static let relationshipFieldRequire = Rswift.StringResource(key: "relationshipFieldRequire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vui lòng nhập ngày sinh
      ///
      /// Locales: vi, en
      static let birthDayFieldRequire = Rswift.StringResource(key: "birthDayFieldRequire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vui lòng nhập tên
      ///
      /// Locales: vi, en
      static let nameFieldRequire = Rswift.StringResource(key: "nameFieldRequire", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vui lòng tạo hồ sơ để lưu các chỉ số liên quan đến sức khoẻ của bạn.
      ///
      /// Locales: vi, en
      static let createFirstProfileText = Rswift.StringResource(key: "createFirstProfileText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vui lòng đứng lên cân.
      ///
      /// Locales: vi, en
      static let standOnTheScale = Rswift.StringResource(key: "standOnTheScale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vóc dáng
      ///
      /// Locales: vi, en
      static let bodyShape = Rswift.StringResource(key: "bodyShape", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vận tốc
      ///
      /// Locales: vi, en
      static let speed = Rswift.StringResource(key: "speed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vận động
      ///
      /// Locales: vi, en
      static let move = Rswift.StringResource(key: "move", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vận động
      ///
      /// Locales: vi, en
      static let smart_watch_s5_exercise = Rswift.StringResource(key: "smart_watch_s5_exercise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vận động viên thể hình
      ///
      /// Locales: vi, en
      static let lThinMuscle = Rswift.StringResource(key: "lThinMuscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vận động viên điền kinh
      ///
      /// Locales: vi, en
      static let standardMuscle = Rswift.StringResource(key: "standardMuscle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vị trí gót chân và ngón chân đứng đúng vào vị trí cảm biến.
      ///
      /// Locales: vi, en
      static let positionHeelAndToe = Rswift.StringResource(key: "positionHeelAndToe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Vợ
      ///
      /// Locales: vi, en
      static let wife = Rswift.StringResource(key: "wife", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Xe đạp
      ///
      /// Locales: vi, en
      static let s5_sport_type_bike = Rswift.StringResource(key: "s5_sport_type_bike", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Xác nhận
      ///
      /// Locales: vi, en
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Xương
      ///
      /// Locales: vi, en
      static let detail_measurement_bone = Rswift.StringResource(key: "detail_measurement_bone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Xương (kg)
      ///
      /// Locales: vi, en
      static let bone = Rswift.StringResource(key: "bone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: bước
      ///
      /// Locales: vi, en
      static let smart_watch_s5_step = Rswift.StringResource(key: "smart_watch_s5_step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: bước/ngày
      ///
      /// Locales: vi, en
      static let smart_watch_s5_step_per_day = Rswift.StringResource(key: "smart_watch_s5_step_per_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: giờ
      ///
      /// Locales: vi, en
      static let hour = Rswift.StringResource(key: "hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: kcal/ngày
      ///
      /// Locales: vi, en
      static let kcalPerDay = Rswift.StringResource(key: "kcalPerDay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: phút
      ///
      /// Locales: vi, en
      static let minute = Rswift.StringResource(key: "minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Áp dụng
      ///
      /// Locales: vi, en
      static let apply = Rswift.StringResource(key: "apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đang tải kết quả đo từ thiết bị.
      ///
      /// Locales: vi, en
      static let spO2_download_files_downloading = Rswift.StringResource(key: "spO2_download_files_downloading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đang đo...
      ///
      /// Locales: vi, en
      static let measuring = Rswift.StringResource(key: "measuring", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đi bộ
      ///
      /// Locales: vi, en
      static let s5_sport_type_walk = Rswift.StringResource(key: "s5_sport_type_walk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đi bộ
      ///
      /// Locales: vi, en
      static let walk = Rswift.StringResource(key: "walk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đo
      ///
      /// Locales: vi, en
      static let measurement = Rswift.StringResource(key: "measurement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đo cân nặng
      ///
      /// Locales: vi, en
      static let weightMeasuring = Rswift.StringResource(key: "weightMeasuring", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đo nhiệt độ định kì
      ///
      /// Locales: vi, en
      static let s5_setting_type_auto_temp = Rswift.StringResource(key: "s5_setting_type_auto_temp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đo nhịp tim định kì
      ///
      /// Locales: vi, en
      static let s5_setting_type_auto_heart_rate = Rswift.StringResource(key: "s5_setting_type_auto_heart_rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đã bỏ liên kết với thiết bị
      ///
      /// Locales: vi, en
      static let unlinkDeviceSuccessMessage = Rswift.StringResource(key: "unlinkDeviceSuccessMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đã kết nối
      ///
      /// Locales: vi, en
      static let connected = Rswift.StringResource(key: "connected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đã kết nối với tài khoản 1SK %@
      ///
      /// Locales: vi, en
      static let sync_linked_account = Rswift.StringResource(key: "sync_linked_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đã kết nối với tài khoản facebook
      ///
      /// Locales: vi, en
      static let sync_facebook = Rswift.StringResource(key: "sync_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đóng
      ///
      /// Locales: vi, en
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đơn vị: bước
      ///
      /// Locales: vi, en
      static let s5_setting_type_step_unit = Rswift.StringResource(key: "s5_setting_type_step_unit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đường huyết
      ///
      /// Locales: vi, en
      static let bloodSugar = Rswift.StringResource(key: "bloodSugar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đạp xe
      ///
      /// Locales: vi, en
      static let cycling = Rswift.StringResource(key: "cycling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đặt mục tiêu số bước hàng ngày để giúp bạn luôn năng động và khỏe mạnh.
      ///
      /// Locales: vi, en
      static let smart_watch_s5_goal_title = Rswift.StringResource(key: "smart_watch_s5_goal_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng bộ dữ liệu
      ///
      /// Locales: vi, en
      static let syncData = Rswift.StringResource(key: "syncData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng bộ dữ liệu các hồ sơ lên hệ thống 1SK, việc này giúp bạn: • Truy cập và xem dữ liệu với bất kỳ thiết bị nào bạn có. • Dữ liệu được đồng bộ xuyên suốt giữa 1SK và 1SK.Connect. • Chia sẻ các chỉ số sức khỏe cho bác sĩ, tạo thuận lợi cho việc tư vấn sức khỏe được nhanh và tốt hơn.
      ///
      /// Locales: vi, en
      static let sync_description = Rswift.StringResource(key: "sync_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng bộ lần cuối %@:%@, %@ tháng %@, %@
      ///
      /// Locales: vi, en
      static let sync_last_date = Rswift.StringResource(key: "sync_last_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng bộ thành công
      ///
      /// Locales: vi, en
      static let sync_success = Rswift.StringResource(key: "sync_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng bộ thất bại
      ///
      /// Locales: vi, en
      static let sync_fail = Rswift.StringResource(key: "sync_fail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng bộ tài khoản
      ///
      /// Locales: vi, en
      static let sync_account = Rswift.StringResource(key: "sync_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đồng ý
      ///
      /// Locales: vi, en
      static let agree = Rswift.StringResource(key: "agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)
      /// en translation: Đừng bỏ lỡ thông báo hấp dẫn mỗi ngày từ 1SK
      ///
      /// Locales: vi, en
      static let dontMissNotification = Rswift.StringResource(key: "dontMissNotification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["vi", "en"], comment: nil)

      /// en translation:  Liên kết ngay
      ///
      /// Locales: vi, en
      static func sync(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync"
        }

        return NSLocalizedString("sync", bundle: bundle, comment: "")
      }

      /// en translation: %@ lần chạy
      ///
      /// Locales: vi, en
      static func smart_watch_s5_run_times(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_run_times", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_run_times"
        }

        let format = NSLocalizedString("smart_watch_s5_run_times", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: (tb/ngày)
      ///
      /// Locales: vi, en
      static func smart_watch_s5_avg_per_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_avg_per_day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_avg_per_day"
        }

        return NSLocalizedString("smart_watch_s5_avg_per_day", bundle: bundle, comment: "")
      }

      /// en translation: -- giờ -- phút
      ///
      /// Locales: vi, en
      static func hourAndMinuteEmty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hourAndMinuteEmty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hourAndMinuteEmty"
        }

        return NSLocalizedString("hourAndMinuteEmty", bundle: bundle, comment: "")
      }

      /// en translation: 1SK
      ///
      /// Locales: vi, en
      static func scale_result_detail_1sk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_1sk", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_1sk"
        }

        return NSLocalizedString("scale_result_detail_1sk", bundle: bundle, comment: "")
      }

      /// en translation: 7 ngày qua
      ///
      /// Locales: vi, en
      static func smart_watch_s5_7_days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_7_days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_7_days"
        }

        return NSLocalizedString("smart_watch_s5_7_days", bundle: bundle, comment: "")
      }

      /// en translation: BMI
      ///
      /// Locales: vi, en
      static func bmi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bmi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bmi"
        }

        return NSLocalizedString("bmi", bundle: bundle, comment: "")
      }

      /// en translation: BMR
      ///
      /// Locales: vi, en
      static func bmr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bmr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bmr"
        }

        return NSLocalizedString("bmr", bundle: bundle, comment: "")
      }

      /// en translation: Body Age
      ///
      /// Locales: vi, en
      static func bodyAge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bodyAge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bodyAge"
        }

        return NSLocalizedString("bodyAge", bundle: bundle, comment: "")
      }

      /// en translation: Báo thức
      ///
      /// Locales: vi, en
      static func s5_setting_type_alarm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_alarm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_alarm"
        }

        return NSLocalizedString("s5_setting_type_alarm", bundle: bundle, comment: "")
      }

      /// en translation: Béo
      ///
      /// Locales: vi, en
      static func fat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fat"
        }

        return NSLocalizedString("fat", bundle: bundle, comment: "")
      }

      /// en translation: Béo chắc
      ///
      /// Locales: vi, en
      static func muscleFat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("muscleFat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "muscleFat"
        }

        return NSLocalizedString("muscleFat", bundle: bundle, comment: "")
      }

      /// en translation: Béo phì
      ///
      /// Locales: vi, en
      static func obesFat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("obesFat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "obesFat"
        }

        return NSLocalizedString("obesFat", bundle: bundle, comment: "")
      }

      /// en translation: Béo phì không chỉ ảnh hưởng đến ngoại hình mà còn tác động tiêu cực đến sức khỏe, tăng nguy cơ mắc những bệnh về tim mạch, tiểu đường, huyết áp cao,... Có thể đánh giá mức độ thừa cân, béo phì theo chỉ số BMI
      ///
      /// Locales: vi, en
      static func scale_result_detail_obesity_level_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_obesity_level_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_obesity_level_description"
        }

        return NSLocalizedString("scale_result_detail_obesity_level_description", bundle: bundle, comment: "")
      }

      /// en translation: Béo phì độ 1
      ///
      /// Locales: vi, en
      static func overWeightLevel1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("overWeightLevel1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "overWeightLevel1"
        }

        return NSLocalizedString("overWeightLevel1", bundle: bundle, comment: "")
      }

      /// en translation: Béo phì độ 2
      ///
      /// Locales: vi, en
      static func overWeightLevel2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("overWeightLevel2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "overWeightLevel2"
        }

        return NSLocalizedString("overWeightLevel2", bundle: bundle, comment: "")
      }

      /// en translation: Béo phì độ 3
      ///
      /// Locales: vi, en
      static func overWeightLevel3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("overWeightLevel3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "overWeightLevel3"
        }

        return NSLocalizedString("overWeightLevel3", bundle: bundle, comment: "")
      }

      /// en translation: Béo ẩn
      ///
      /// Locales: vi, en
      static func lFatMuscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lFatMuscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lFatMuscle"
        }

        return NSLocalizedString("lFatMuscle", bundle: bundle, comment: "")
      }

      /// en translation: Bình thường
      ///
      /// Locales: vi, en
      static func normal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "normal"
        }

        return NSLocalizedString("normal", bundle: bundle, comment: "")
      }

      /// en translation: Bơi
      ///
      /// Locales: vi, en
      static func swimming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("swimming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "swimming"
        }

        return NSLocalizedString("swimming", bundle: bundle, comment: "")
      }

      /// en translation: Bước chân
      ///
      /// Locales: vi, en
      static func step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "step"
        }

        return NSLocalizedString("step", bundle: bundle, comment: "")
      }

      /// en translation: Bạn chưa liên kết với thiết bị đo nào.
      ///
      /// Locales: vi, en
      static func youDoNotHaveAnyDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youDoNotHaveAnyDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "youDoNotHaveAnyDevice"
        }

        return NSLocalizedString("youDoNotHaveAnyDevice", bundle: bundle, comment: "")
      }

      /// en translation: Bạn có chắc chắn muốn bỏ liên kết với thiết bị này?
      ///
      /// Locales: vi, en
      static func unlinkDeviceConfirmMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlinkDeviceConfirmMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlinkDeviceConfirmMessage"
        }

        return NSLocalizedString("unlinkDeviceConfirmMessage", bundle: bundle, comment: "")
      }

      /// en translation: Bạn có chắc chắn muốn ngắt kết nối?
      ///
      /// Locales: vi, en
      static func alert_message_unlink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_message_unlink", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_message_unlink"
        }

        return NSLocalizedString("alert_message_unlink", bundle: bundle, comment: "")
      }

      /// en translation: Bạn có chắc chắn muốn xóa hồ sơ này?
      ///
      /// Locales: vi, en
      static func deleteProfileConfirmMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteProfileConfirmMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleteProfileConfirmMessage"
        }

        return NSLocalizedString("deleteProfileConfirmMessage", bundle: bundle, comment: "")
      }

      /// en translation: Bạn có cử động người trong khi đo, thiết bị không trả về kết quả. Bạn hãy ngồi đúng tư thế và thực hiện lại phép đo
      ///
      /// Locales: vi, en
      static func biolight_error_movement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_error_movement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_error_movement"
        }

        return NSLocalizedString("biolight_error_movement", bundle: bundle, comment: "")
      }

      /// en translation: Bạn hãy bật nhắc nhở uống nước để nhận thông báo trên vòng đeo sức khỏe.
      ///
      /// Locales: vi, en
      static func s5_water_setting_remind_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_water_setting_remind_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_water_setting_remind_title"
        }

        return NSLocalizedString("s5_water_setting_remind_title", bundle: bundle, comment: "")
      }

      /// en translation: Bạn phải liên kết tài khoản để bật tính năng này
      ///
      /// Locales: vi, en
      static func alert_message_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_message_link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_message_link"
        }

        return NSLocalizedString("alert_message_link", bundle: bundle, comment: "")
      }

      /// en translation: Bạn vui lòng kiểm tra kết nối mạng.
      ///
      /// Locales: vi, en
      static func internet_error_not_connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internet_error_not_connect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internet_error_not_connect"
        }

        return NSLocalizedString("internet_error_not_connect", bundle: bundle, comment: "")
      }

      /// en translation: Bạn đã huỷ liên kết với thiết bị
      ///
      /// Locales: vi, en
      static func deviceIsUnPaired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deviceIsUnPaired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deviceIsUnPaired"
        }

        return NSLocalizedString("deviceIsUnPaired", bundle: bundle, comment: "")
      }

      /// en translation: Bạn đã đạt quá giới hạn cân
      ///
      /// Locales: vi, en
      static func overWeightMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("overWeightMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "overWeightMessage"
        }

        return NSLocalizedString("overWeightMessage", bundle: bundle, comment: "")
      }

      /// en translation: Bật
      ///
      /// Locales: vi, en
      static func smart_watch_s5_is_on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_is_on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_is_on"
        }

        return NSLocalizedString("smart_watch_s5_is_on", bundle: bundle, comment: "")
      }

      /// en translation: Bật Bluetooth để 1SK.Connect có thể kết nối với thiết bị của bạn.
      ///
      /// Locales: vi, en
      static func turnOnBluetoothMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turnOnBluetoothMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turnOnBluetoothMessage"
        }

        return NSLocalizedString("turnOnBluetoothMessage", bundle: bundle, comment: "")
      }

      /// en translation: Bật Bluetooth để cho phép 1SK.Connect liên kết với thiết bị của bạn.
      ///
      /// Locales: vi, en
      static func turnOnBluetoothMessageForLinkDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turnOnBluetoothMessageForLinkDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turnOnBluetoothMessageForLinkDevice"
        }

        return NSLocalizedString("turnOnBluetoothMessageForLinkDevice", bundle: bundle, comment: "")
      }

      /// en translation: Bật thông báo để cho phép trình theo dõi gửi thông báo. Nếu vòng đeo tay không nhận được tin nhắn nhắc nhở, vui lòng mở lại quyền thông báo của ứng dụng 1SK.Connect
      ///
      /// Locales: vi, en
      static func s5_setting_type_notice_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_notice_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_notice_title"
        }

        return NSLocalizedString("s5_setting_type_notice_title", bundle: bundle, comment: "")
      }

      /// en translation: Bật tính năng thông báo
      ///
      /// Locales: vi, en
      static func turnOnNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turnOnNotification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turnOnNotification"
        }

        return NSLocalizedString("turnOnNotification", bundle: bundle, comment: "")
      }

      /// en translation: Bỏ giày và tất trước khi đứng lên cân để được kết quả phân tích chính xác nhất.
      ///
      /// Locales: vi, en
      static func removeShoes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("removeShoes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "removeShoes"
        }

        return NSLocalizedString("removeShoes", bundle: bundle, comment: "")
      }

      /// en translation: Bỏ kết nối
      ///
      /// Locales: vi, en
      static func disconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disconnect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disconnect"
        }

        return NSLocalizedString("disconnect", bundle: bundle, comment: "")
      }

      /// en translation: Bố đẻ
      ///
      /// Locales: vi, en
      static func father(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("father", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "father"
        }

        return NSLocalizedString("father", bundle: bundle, comment: "")
      }

      /// en translation: CHỈ SỐ MỚI NHẤT
      ///
      /// Locales: vi, en
      static func lastestInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastestInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lastestInfo"
        }

        return NSLocalizedString("lastestInfo", bundle: bundle, comment: "")
      }

      /// en translation: CN
      ///
      /// Locales: vi, en
      static func sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sunday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sunday"
        }

        return NSLocalizedString("sunday", bundle: bundle, comment: "")
      }

      /// en translation: Calo
      ///
      /// Locales: vi, en
      static func smart_watch_s5_calo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_calo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_calo"
        }

        return NSLocalizedString("smart_watch_s5_calo", bundle: bundle, comment: "")
      }

      /// en translation: Calo tiêu thụ trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static func sm_excercise_average_kcal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_average_kcal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_average_kcal"
        }

        return NSLocalizedString("sm_excercise_average_kcal", bundle: bundle, comment: "")
      }

      /// en translation: Calo tiêu thụ trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static func sm_excercise_average_kcal_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_average_kcal_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_average_kcal_month"
        }

        return NSLocalizedString("sm_excercise_average_kcal_month", bundle: bundle, comment: "")
      }

      /// en translation: Cao
      ///
      /// Locales: vi, en
      static func high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("high", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "high"
        }

        return NSLocalizedString("high", bundle: bundle, comment: "")
      }

      /// en translation: Chi tiết dữ liệu
      ///
      /// Locales: vi, en
      static func spO2_detail_value_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spO2_detail_value_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_detail_value_title"
        }

        return NSLocalizedString("spO2_detail_value_title", bundle: bundle, comment: "")
      }

      /// en translation: Chiều cao
      ///
      /// Locales: vi, en
      static func height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "height"
        }

        return NSLocalizedString("height", bundle: bundle, comment: "")
      }

      /// en translation: Chiều cao (cm)
      ///
      /// Locales: vi, en
      static func heightCm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heightCm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heightCm"
        }

        return NSLocalizedString("heightCm", bundle: bundle, comment: "")
      }

      /// en translation: Chiều cao (cm)*
      ///
      /// Locales: vi, en
      static func heightCmPlaceHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heightCmPlaceHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heightCmPlaceHolder"
        }

        return NSLocalizedString("heightCmPlaceHolder", bundle: bundle, comment: "")
      }

      /// en translation: Chiều cao tối thiểu là 50 cm
      ///
      /// Locales: vi, en
      static func minHeightMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minHeightMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minHeightMessage"
        }

        return NSLocalizedString("minHeightMessage", bundle: bundle, comment: "")
      }

      /// en translation: Chiều cao tối đa là 300 cm
      ///
      /// Locales: vi, en
      static func maxHeightMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maxHeightMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "maxHeightMessage"
        }

        return NSLocalizedString("maxHeightMessage", bundle: bundle, comment: "")
      }

      /// en translation: Chưa có dữ liệu
      ///
      /// Locales: vi, en
      static func doNotHaveData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("doNotHaveData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "doNotHaveData"
        }

        return NSLocalizedString("doNotHaveData", bundle: bundle, comment: "")
      }

      /// en translation: Chưa có dữ liệu
      ///
      /// Locales: vi, en
      static func smart_watch_s5_has_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_has_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_has_no_data"
        }

        return NSLocalizedString("smart_watch_s5_has_no_data", bundle: bundle, comment: "")
      }

      /// en translation: Chưa có thông báo nào.
      ///
      /// Locales: vi, en
      static func noNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noNotification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noNotification"
        }

        return NSLocalizedString("noNotification", bundle: bundle, comment: "")
      }

      /// en translation: Chưa kết nối
      ///
      /// Locales: vi, en
      static func disconnected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disconnected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disconnected"
        }

        return NSLocalizedString("disconnected", bundle: bundle, comment: "")
      }

      /// en translation: Chưa kết nối với tài khoản 1SK
      ///
      /// Locales: vi, en
      static func sync_not_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_not_link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_not_link"
        }

        return NSLocalizedString("sync_not_link", bundle: bundle, comment: "")
      }

      /// en translation: Chạy
      ///
      /// Locales: vi, en
      static func run(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("run", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "run"
        }

        return NSLocalizedString("run", bundle: bundle, comment: "")
      }

      /// en translation: Chạy
      ///
      /// Locales: vi, en
      static func s5_sport_type_run(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_sport_type_run", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_sport_type_run"
        }

        return NSLocalizedString("s5_sport_type_run", bundle: bundle, comment: "")
      }

      /// en translation: Chất béo cơ thể
      ///
      /// Locales: vi, en
      static func scale_result_detail_fat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_fat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_fat"
        }

        return NSLocalizedString("scale_result_detail_fat", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số BMI
      ///
      /// Locales: vi, en
      static func scale_result_detail_bmi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_bmi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_bmi"
        }

        return NSLocalizedString("scale_result_detail_bmi", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số BMI chuẩn được tính dựa trên chiều cao và cân nặng, áp dụng cho nam và nữ trưởng thành, nhằm xác định tình trạng cơ thể đang ở mức ổn định, suy dinh dưỡng hay béo phì. BMI lý tưởng của người Việt Nam (cả nam và nữ) là từ 18,5 đến 22,9. Người có BMI trong khoảng này nhưng cơ thể nhiều chất béo được xác định là “béo phì ẩn”
      ///
      /// Locales: vi, en
      static func scale_result_detail_bmi_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_bmi_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_bmi_description"
        }

        return NSLocalizedString("scale_result_detail_bmi_description", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số BMR
      ///
      /// Locales: vi, en
      static func scale_result_detail_bmr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_bmr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_bmr"
        }

        return NSLocalizedString("scale_result_detail_bmr", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số cơ
      ///
      /// Locales: vi, en
      static func scale_result_detail_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_muscle"
        }

        return NSLocalizedString("scale_result_detail_muscle", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số của bạn: 
      ///
      /// Locales: vi, en
      static func scale_result_detail_value(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_value"
        }

        return NSLocalizedString("scale_result_detail_value", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số này phân loại vóc dáng người dùng dựa vào tỷ lệ Lượng mỡ và Lượng cơ của bạn. Khi bạn hoạt động và tăng cường tập luyện, lượng mỡ cơ thể sẽ giảm, chỉ số vóc dáng cũng sẽ thay đổi rõ rệt. Ngay cả khi cân nặng của bạn không đổi, sự thay đổi về tỷ lệ lượng cơ và lượng mỡ sẽ giúp bạn khỏe mạnh hơn và giảm thiểu nguy cơ dẫn tới các vấn đề về sức khỏe.
      ///
      /// Locales: vi, en
      static func scale_result_detail_body_shape_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_body_shape_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_body_shape_description"
        }

        return NSLocalizedString("scale_result_detail_body_shape_description", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số thể hiện khối lượng xương trong cơ thể (xương khoáng, canxi và các khoáng chất khác). Đo khối lượng xương thường xuyên sẽ chẩn đoán tình trạng loãng xương của cơ thể. Lượng xương có quan hệ tỷ lệ thuận với lượng cơ, vì vậy, tập luyện thể thao, chế độ dinh dưỡng cân bằng và duy trì cân nặng ổn định giúp xây dựng hệ xương chắc khỏe hơn.
      ///
      /// Locales: vi, en
      static func scale_result_detail_bone_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_bone_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_bone_description"
        }

        return NSLocalizedString("scale_result_detail_bone_description", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số thể hiện phần trăm khối lượng chất béo so với khối tượng toàn bộ cơ thể, giúp bạn nhanh chóng xác định lượng mỡ thừa, đặc biệt là mỡ xấu đang tích tụ. Chỉ số này đánh giá tình trạng sức khỏe cũng như vóc dáng cho nam giới và phụ nữ để xây dựng kế hoạch tập luyện và dinh dưỡng phù hợp. Chỉ số này thấp cơ thể có thể bị rối loạn nội tiết Chỉ số cao dẫn đến béo phì Giữ chỉ số này ở ngưỡng tiêu chuẩn với kế hoạch tập luyện và dinh dưỡng phù hợp cho bạn sức khỏe hoàn hảo, thân hình săn chắc, hấp dẫn
      ///
      /// Locales: vi, en
      static func scale_result_detail_fat_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_fat_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_fat_description"
        }

        return NSLocalizedString("scale_result_detail_fat_description", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số đo
      ///
      /// Locales: vi, en
      static func measurementIndex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("measurementIndex", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "measurementIndex"
        }

        return NSLocalizedString("measurementIndex", bundle: bundle, comment: "")
      }

      /// en translation: Chỉ số đề cập đến số đo trọng lượng cơ thể mà không có gì trên người. Cân nặng cơ thể là một chỉ số cơ bản nhưng góp phần quan trọng trong quá trình phân tích thành phần cơ thể. Bạn có thể biết tình trạng sức khỏe dựa trên sự thay đổi cân nặng trong một khoảng thời gian cụ thể.
      ///
      /// Locales: vi, en
      static func scale_result_detail_weight_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_weight_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_weight_description"
        }

        return NSLocalizedString("scale_result_detail_weight_description", bundle: bundle, comment: "")
      }

      /// en translation: Chọn mối quan hệ
      ///
      /// Locales: vi, en
      static func chooseRelationship(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseRelationship", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseRelationship"
        }

        return NSLocalizedString("chooseRelationship", bundle: bundle, comment: "")
      }

      /// en translation: Chọn ngày sinh
      ///
      /// Locales: vi, en
      static func chooseBirthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseBirthday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseBirthday"
        }

        return NSLocalizedString("chooseBirthday", bundle: bundle, comment: "")
      }

      /// en translation: Chọn nhóm máu
      ///
      /// Locales: vi, en
      static func chooseBloodGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseBloodGroup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseBloodGroup"
        }

        return NSLocalizedString("chooseBloodGroup", bundle: bundle, comment: "")
      }

      /// en translation: Chọn số bước
      ///
      /// Locales: vi, en
      static func s5_setting_type_step_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_step_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_step_title"
        }

        return NSLocalizedString("s5_setting_type_step_title", bundle: bundle, comment: "")
      }

      /// en translation: Chọn ảnh từ: 
      ///
      /// Locales: vi, en
      static func chooseImageFrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseImageFrom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseImageFrom"
        }

        return NSLocalizedString("chooseImageFrom", bundle: bundle, comment: "")
      }

      /// en translation: Chồng
      ///
      /// Locales: vi, en
      static func husband(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("husband", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "husband"
        }

        return NSLocalizedString("husband", bundle: bundle, comment: "")
      }

      /// en translation: Con gái
      ///
      /// Locales: vi, en
      static func daughter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("daughter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "daughter"
        }

        return NSLocalizedString("daughter", bundle: bundle, comment: "")
      }

      /// en translation: Con trai
      ///
      /// Locales: vi, en
      static func son(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("son", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "son"
        }

        return NSLocalizedString("son", bundle: bundle, comment: "")
      }

      /// en translation: Cài đặt
      ///
      /// Locales: vi, en
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setting"
        }

        return NSLocalizedString("setting", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng
      ///
      /// Locales: vi, en
      static func detail_measurement_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_weight"
        }

        return NSLocalizedString("detail_measurement_weight", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng
      ///
      /// Locales: vi, en
      static func weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weight"
        }

        return NSLocalizedString("weight", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng (kg)
      ///
      /// Locales: vi, en
      static func weightKg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weightKg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weightKg"
        }

        return NSLocalizedString("weightKg", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng cơ thể
      ///
      /// Locales: vi, en
      static func scale_result_detail_weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_weight"
        }

        return NSLocalizedString("scale_result_detail_weight", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng tiêu chuẩn
      ///
      /// Locales: vi, en
      static func detail_measurement_ideal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_ideal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_ideal"
        }

        return NSLocalizedString("detail_measurement_ideal", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng tiêu chuẩn (kg)
      ///
      /// Locales: vi, en
      static func bodyStandard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bodyStandard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bodyStandard"
        }

        return NSLocalizedString("bodyStandard", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng tối thiểu là 2 kg
      ///
      /// Locales: vi, en
      static func minWeightMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minWeightMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minWeightMessage"
        }

        return NSLocalizedString("minWeightMessage", bundle: bundle, comment: "")
      }

      /// en translation: Cân nặng tối đa là 200 kg
      ///
      /// Locales: vi, en
      static func maxWeightMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maxWeightMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "maxWeightMessage"
        }

        return NSLocalizedString("maxWeightMessage", bundle: bundle, comment: "")
      }

      /// en translation: Cân đối
      ///
      /// Locales: vi, en
      static func standard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("standard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "standard"
        }

        return NSLocalizedString("standard", bundle: bundle, comment: "")
      }

      /// en translation: Có thể trong quá trình đo thiết bị đã bị lỏng hoặc không được đeo đúng cách nên đã không trả về kết quả, bạn hãy kiểm tra và đeo lại thiết bị và thử lại để có kết quả đo chuẩn xác nhất
      ///
      /// Locales: vi, en
      static func biolight_error_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_error_device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_error_device"
        }

        return NSLocalizedString("biolight_error_device", bundle: bundle, comment: "")
      }

      /// en translation: Có, bỏ liên kết
      ///
      /// Locales: vi, en
      static func unlinkDeviceConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlinkDeviceConfirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlinkDeviceConfirm"
        }

        return NSLocalizedString("unlinkDeviceConfirm", bundle: bundle, comment: "")
      }

      /// en translation: Có, xóa hồ sơ
      ///
      /// Locales: vi, en
      static func deleteProfileConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteProfileConfirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleteProfileConfirm"
        }

        return NSLocalizedString("deleteProfileConfirm", bundle: bundle, comment: "")
      }

      /// en translation: Cơ
      ///
      /// Locales: vi, en
      static func detail_measurement_muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_muscle"
        }

        return NSLocalizedString("detail_measurement_muscle", bundle: bundle, comment: "")
      }

      /// en translation: Cơ (kg)
      ///
      /// Locales: vi, en
      static func muscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("muscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "muscle"
        }

        return NSLocalizedString("muscle", bundle: bundle, comment: "")
      }

      /// en translation: Cơ bắp
      ///
      /// Locales: vi, en
      static func muscular(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("muscular", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "muscular"
        }

        return NSLocalizedString("muscular", bundle: bundle, comment: "")
      }

      /// en translation: Cập nhật
      ///
      /// Locales: vi, en
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update"
        }

        return NSLocalizedString("update", bundle: bundle, comment: "")
      }

      /// en translation: Cập nhật dữ liệu
      ///
      /// Locales: vi, en
      static func reloadData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reloadData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reloadData"
        }

        return NSLocalizedString("reloadData", bundle: bundle, comment: "")
      }

      /// en translation: Dừng đo
      ///
      /// Locales: vi, en
      static func stop_measurement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stop_measurement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stop_measurement"
        }

        return NSLocalizedString("stop_measurement", bundle: bundle, comment: "")
      }

      /// en translation: Giấc ngủ
      ///
      /// Locales: vi, en
      static func smart_watch_s5_sleep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_sleep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_sleep"
        }

        return NSLocalizedString("smart_watch_s5_sleep", bundle: bundle, comment: "")
      }

      /// en translation: Giấc ngủ: %@
      ///
      /// Locales: vi, en
      static func smart_watch_s5_sleep_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_sleep_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_sleep_input"
        }

        let format = NSLocalizedString("smart_watch_s5_sleep_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Giới thiệu
      ///
      /// Locales: vi, en
      static func introduce(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("introduce", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "introduce"
        }

        return NSLocalizedString("introduce", bundle: bundle, comment: "")
      }

      /// en translation: Gầy
      ///
      /// Locales: vi, en
      static func thin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thin"
        }

        return NSLocalizedString("thin", bundle: bundle, comment: "")
      }

      /// en translation: HA Bình thường
      ///
      /// Locales: vi, en
      static func biolight_description_blood_pressure_normal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_description_blood_pressure_normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_description_blood_pressure_normal"
        }

        return NSLocalizedString("biolight_description_blood_pressure_normal", bundle: bundle, comment: "")
      }

      /// en translation: HA Cao 1
      ///
      /// Locales: vi, en
      static func biolight_description_blood_pressure_high_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_description_blood_pressure_high_1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_description_blood_pressure_high_1"
        }

        return NSLocalizedString("biolight_description_blood_pressure_high_1", bundle: bundle, comment: "")
      }

      /// en translation: HA Cao 2
      ///
      /// Locales: vi, en
      static func biolight_description_blood_pressure_high_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_description_blood_pressure_high_2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_description_blood_pressure_high_2"
        }

        return NSLocalizedString("biolight_description_blood_pressure_high_2", bundle: bundle, comment: "")
      }

      /// en translation: HA Thấp
      ///
      /// Locales: vi, en
      static func biolight_description_blood_pressure_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_description_blood_pressure_low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_description_blood_pressure_low"
        }

        return NSLocalizedString("biolight_description_blood_pressure_low", bundle: bundle, comment: "")
      }

      /// en translation: HA Tiền tăng
      ///
      /// Locales: vi, en
      static func biolight_description_blood_pressure_pre_hypertension(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_description_blood_pressure_pre_hypertension", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_description_blood_pressure_pre_hypertension"
        }

        return NSLocalizedString("biolight_description_blood_pressure_pre_hypertension", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp
      ///
      /// Locales: vi, en
      static func bloodPressure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodPressure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bloodPressure"
        }

        return NSLocalizedString("bloodPressure", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp
      ///
      /// Locales: vi, en
      static func bloodpressure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodpressure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bloodpressure"
        }

        return NSLocalizedString("bloodpressure", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp
      ///
      /// Locales: vi, en
      static func smart_watch_s5_blood_pressure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_blood_pressure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_blood_pressure"
        }

        return NSLocalizedString("smart_watch_s5_blood_pressure", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp bình thường
      ///
      /// Locales: vi, en
      static func biolight_detail_blood_pressure_normal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_detail_blood_pressure_normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_detail_blood_pressure_normal"
        }

        return NSLocalizedString("biolight_detail_blood_pressure_normal", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp cao nhất: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_max_bp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_max_bp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_max_bp"
        }

        return NSLocalizedString("smart_watch_s5_max_bp", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp thấp
      ///
      /// Locales: vi, en
      static func biolight_detail_blood_pressure_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_detail_blood_pressure_low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_detail_blood_pressure_low"
        }

        return NSLocalizedString("biolight_detail_blood_pressure_low", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp thấp nhất: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_min_bp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_min_bp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_min_bp"
        }

        return NSLocalizedString("smart_watch_s5_min_bp", bundle: bundle, comment: "")
      }

      /// en translation: Huyết áp: %@ mmHg
      ///
      /// Locales: vi, en
      static func smart_watch_s5_blood_pressure_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_blood_pressure_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_blood_pressure_input"
        }

        let format = NSLocalizedString("smart_watch_s5_blood_pressure_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Huỷ
      ///
      /// Locales: vi, en
      static func alert_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_cancel"
        }

        return NSLocalizedString("alert_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Huỷ
      ///
      /// Locales: vi, en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Huỷ liên kết
      ///
      /// Locales: vi, en
      static func sync_unlink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_unlink", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_unlink"
        }

        return NSLocalizedString("sync_unlink", bundle: bundle, comment: "")
      }

      /// en translation: Huỷ mục tiêu
      ///
      /// Locales: vi, en
      static func smart_watch_s5_goal_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_goal_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_goal_cancel"
        }

        return NSLocalizedString("smart_watch_s5_goal_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Hôm nay
      ///
      /// Locales: vi, en
      static func today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "today"
        }

        return NSLocalizedString("today", bundle: bundle, comment: "")
      }

      /// en translation: Họ tên
      ///
      /// Locales: vi, en
      static func fullName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fullName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fullName"
        }

        return NSLocalizedString("fullName", bundle: bundle, comment: "")
      }

      /// en translation: Hồ sơ
      ///
      /// Locales: vi, en
      static func sync_profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_profile"
        }

        return NSLocalizedString("sync_profile", bundle: bundle, comment: "")
      }

      /// en translation: Hồ sơ sức khoẻ
      ///
      /// Locales: vi, en
      static func healthProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("healthProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "healthProfile"
        }

        return NSLocalizedString("healthProfile", bundle: bundle, comment: "")
      }

      /// en translation: Khoẻ mạnh
      ///
      /// Locales: vi, en
      static func healthy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("healthy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "healthy"
        }

        return NSLocalizedString("healthy", bundle: bundle, comment: "")
      }

      /// en translation: Khác
      ///
      /// Locales: vi, en
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "other"
        }

        return NSLocalizedString("other", bundle: bundle, comment: "")
      }

      /// en translation: Khôi phục cài đặt gốc
      ///
      /// Locales: vi, en
      static func s5_setting_type_s5_reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_s5_reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_s5_reset"
        }

        return NSLocalizedString("s5_setting_type_s5_reset", bundle: bundle, comment: "")
      }

      /// en translation: Khôi phục cài đặt gốc
      ///
      /// Locales: vi, en
      static func smart_watch_s5_reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_reset"
        }

        return NSLocalizedString("smart_watch_s5_reset", bundle: bundle, comment: "")
      }

      /// en translation: Không
      ///
      /// Locales: vi, en
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, comment: "")
      }

      /// en translation: Không thể kết nối với thiết bị
      ///
      /// Locales: vi, en
      static func canNotConnectToDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("canNotConnectToDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "canNotConnectToDevice"
        }

        return NSLocalizedString("canNotConnectToDevice", bundle: bundle, comment: "")
      }

      /// en translation: Không tìm thấy thiết bị nào. Vui lòng đảm bảo thiết bị cần kết nối đã được bật và đặt trong phạm vi có thể liên kết.
      ///
      /// Locales: vi, en
      static func notFoundAnyDeviceMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notFoundAnyDeviceMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notFoundAnyDeviceMessage"
        }

        return NSLocalizedString("notFoundAnyDeviceMessage", bundle: bundle, comment: "")
      }

      /// en translation: Khỏe mạnh
      ///
      /// Locales: vi, en
      static func scale_result_healthy_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_healthy_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_healthy_description"
        }

        return NSLocalizedString("scale_result_healthy_description", bundle: bundle, comment: "")
      }

      /// en translation: Khối lượng cơ bao gồm khối lượng các cơ xương, cơ trơn như cơ tim, cơ hệ tiêu hóa và nước chứa trong các tế bào cơ. Tăng cường khối lượng cơ sẽ giúp tỷ lệ trao đổi chất cơ bản BMR tăng lên, giúp giảm lượng mỡ thừa trong cơ thể và giảm cân một cách lành mạnh.
      ///
      /// Locales: vi, en
      static func scale_result_detail_muscle_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_muscle_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_muscle_description"
        }

        return NSLocalizedString("scale_result_detail_muscle_description", bundle: bundle, comment: "")
      }

      /// en translation: Khối lượng cơ thể săn chắc
      ///
      /// Locales: vi, en
      static func scale_result_detail_lbw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_lbw", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_lbw"
        }

        return NSLocalizedString("scale_result_detail_lbw", bundle: bundle, comment: "")
      }

      /// en translation: Khối lượng cơ thể săn chắc (kg)
      ///
      /// Locales: vi, en
      static func lbw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbw", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lbw"
        }

        return NSLocalizedString("lbw", bundle: bundle, comment: "")
      }

      /// en translation: Khối lượng xương
      ///
      /// Locales: vi, en
      static func scale_result_detail_bone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_bone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_bone"
        }

        return NSLocalizedString("scale_result_detail_bone", bundle: bundle, comment: "")
      }

      /// en translation: Kết nối
      ///
      /// Locales: vi, en
      static func connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connect"
        }

        return NSLocalizedString("connect", bundle: bundle, comment: "")
      }

      /// en translation: Kết quả đo
      ///
      /// Locales: vi, en
      static func measuringResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("measuringResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "measuringResult"
        }

        return NSLocalizedString("measuringResult", bundle: bundle, comment: "")
      }

      /// en translation: Leo núi
      ///
      /// Locales: vi, en
      static func s5_sport_type_climb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_sport_type_climb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_sport_type_climb"
        }

        return NSLocalizedString("s5_sport_type_climb", bundle: bundle, comment: "")
      }

      /// en translation: Liên kết bị lỗi
      ///
      /// Locales: vi, en
      static func sync_link_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_link_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_link_failed"
        }

        return NSLocalizedString("sync_link_failed", bundle: bundle, comment: "")
      }

      /// en translation: Liên kết thiết bị
      ///
      /// Locales: vi, en
      static func linkDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("linkDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "linkDevice"
        }

        return NSLocalizedString("linkDevice", bundle: bundle, comment: "")
      }

      /// en translation: Liên kết tài khoản
      ///
      /// Locales: vi, en
      static func sync_link_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_link_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_link_account"
        }

        return NSLocalizedString("sync_link_account", bundle: bundle, comment: "")
      }

      /// en translation: Liên kết với thiết bị đo để theo dõi và nhận thông báo về các chỉ số sức khoẻ của bạn.
      ///
      /// Locales: vi, en
      static func linkFirstDeviceMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("linkFirstDeviceMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "linkFirstDeviceMessage"
        }

        return NSLocalizedString("linkFirstDeviceMessage", bundle: bundle, comment: "")
      }

      /// en translation: Loại thiết bị này đã được liên kết
      ///
      /// Locales: vi, en
      static func linked_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("linked_device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "linked_device"
        }

        return NSLocalizedString("linked_device", bundle: bundle, comment: "")
      }

      /// en translation: Là khối lượng tương ứng phù hợp với chiều cao của mỗi người. Duy trì trọng lượng chuẩn giúp tránh một số vấn đề sức khỏe nghiêm trọng như: béo phì, tăng huyết áp, tiểu đường, suy dinh dưỡng...
      ///
      /// Locales: vi, en
      static func scale_result_detail_ideal_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_ideal_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_ideal_description"
        }

        return NSLocalizedString("scale_result_detail_ideal_description", bundle: bundle, comment: "")
      }

      /// en translation: Là lượng mỡ nằm ngay bên dưới da giúp cơ thể dự trữ năng lượng và điều chỉnh thân nhiệt, tỷ lệ này khác nhau phụ thuộc vào gen di truyền cũng như là các yếu tố về lối sống như mức độ hoạt động thể chất và chế độ ăn uống của mỗi người. Mỡ dưới da có chức năng như 1 lớp đệm để bảo vệ cơ và xương khỏi tác động của các cú va chạm từ bên ngoài như ngã, va đập,...
      ///
      /// Locales: vi, en
      static func scale_result_detail_subcutaneous_fat_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_subcutaneous_fat_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_subcutaneous_fat_description"
        }

        return NSLocalizedString("scale_result_detail_subcutaneous_fat_description", bundle: bundle, comment: "")
      }

      /// en translation: Là thành phần dinh dưỡng quan trọng cấu tạo nên các bộ phận của cơ thể. Protein không chỉ giúp cơ thể khỏe mạnh và tăng cơ bắp mà còn tốt cho xương, sụn, máu. Thêm vào đó, protein giúp nuôi dưỡng da, tóc, móng tay và các cơ quan quan trọng trong cơ thể. Thiếu hụt Protein có thể dẫn đến suy giảm miễn dịch, thiếu máu, teo cơ. Tỷ lệ Protein trong cơ thể khỏe mạnh nằm từ 16- 20%
      ///
      /// Locales: vi, en
      static func scale_result_detail_protein_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_protein_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_protein_description"
        }

        return NSLocalizedString("scale_result_detail_protein_description", bundle: bundle, comment: "")
      }

      /// en translation: Là tỉ lệ trao đổi chất cơ bản cho biết mức năng lượng (calo) tối thiếu cơ thể cần trong 24 giờ để đảm bảo hoạt động bình thường của các cơ quan (bao gồm cả trạng thái nghỉ ngơi). Chỉ số được xác định bằng năng lượng tiêu thụ bởi khối cơ bắp. Những người có BMR thường không dễ để tăng cân. Sử dụng nhiều thịt, cá và các sản phẩm từ sữa kết hợp tập thể dục có thể giúp bạn tăng khối lượng cơ
      ///
      /// Locales: vi, en
      static func scale_result_detail_bmr_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_bmr_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_bmr_description"
        }

        return NSLocalizedString("scale_result_detail_bmr_description", bundle: bundle, comment: "")
      }

      /// en translation: Là tổng khối lượng cơ thể trừ đi tất cả khối lượng mỡ, giúp bạn đánh giá được trạng thái cơ thể, từ đó có thể điều chỉnh để giảm cân, tăng cân hoặc cải thiện một số chỉ số quan trọng phù hợp với tình trạng cơ thể. Cách tính: Trọng lượng cơ thể x (1 - tỷ lệ % mỡ cơ thể)
      ///
      /// Locales: vi, en
      static func scale_result_detail_lbw_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_lbw_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_lbw_description"
        }

        return NSLocalizedString("scale_result_detail_lbw_description", bundle: bundle, comment: "")
      }

      /// en translation: Là tỷ lệ giữa toàn bộ lượng nước (bao gồm: nước trong máu, bạch huyết, dịch cơ thể,...) và trọng lượng cơ thể. Mất nước có thể gây ảnh hưởng tiêu cực đến sức khỏe con người. Theo dõi % lượng nước toàn phần tại một thời điểm nhất định trong ngày để đánh giá chính xác những thay đổi của cơ thể.
      ///
      /// Locales: vi, en
      static func scale_result_detail_water_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_water_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_water_description"
        }

        return NSLocalizedString("scale_result_detail_water_description", bundle: bundle, comment: "")
      }

      /// en translation: Lưu
      ///
      /// Locales: vi, en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, comment: "")
      }

      /// en translation: Lưu ý:
      ///
      /// Locales: vi, en
      static func note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "note"
        }

        return NSLocalizedString("note", bundle: bundle, comment: "")
      }

      /// en translation: Lượng nước cơ thể
      ///
      /// Locales: vi, en
      static func scale_result_detail_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_water", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_water"
        }

        return NSLocalizedString("scale_result_detail_water", bundle: bundle, comment: "")
      }

      /// en translation: LỊCH SỬ ĐO
      ///
      /// Locales: vi, en
      static func measuringHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("measuringHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "measuringHistory"
        }

        return NSLocalizedString("measuringHistory", bundle: bundle, comment: "")
      }

      /// en translation: Lịch sử hoạt động
      ///
      /// Locales: vi, en
      static func sm_excercise_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_history"
        }

        return NSLocalizedString("sm_excercise_history", bundle: bundle, comment: "")
      }

      /// en translation: Lỗi
      ///
      /// Locales: vi, en
      static func alert_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_error"
        }

        return NSLocalizedString("alert_error", bundle: bundle, comment: "")
      }

      /// en translation: Lỗi dữ liệu.
      ///
      /// Locales: vi, en
      static func internet_error_data_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internet_error_data_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internet_error_data_error"
        }

        return NSLocalizedString("internet_error_data_error", bundle: bundle, comment: "")
      }

      /// en translation: Mất kết nối mạng, vui lòng kiểm tra lại.
      ///
      /// Locales: vi, en
      static func internet_error_lost_connection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internet_error_lost_connection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internet_error_lost_connection"
        }

        return NSLocalizedString("internet_error_lost_connection", bundle: bundle, comment: "")
      }

      /// en translation: Mặt đồng hồ
      ///
      /// Locales: vi, en
      static func s5_setting_type_watch_face(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_watch_face", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_watch_face"
        }

        return NSLocalizedString("s5_setting_type_watch_face", bundle: bundle, comment: "")
      }

      /// en translation: Mẹ đẻ
      ///
      /// Locales: vi, en
      static func mother(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mother", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mother"
        }

        return NSLocalizedString("mother", bundle: bundle, comment: "")
      }

      /// en translation: Mối quan hệ
      ///
      /// Locales: vi, en
      static func relationship(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("relationship", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "relationship"
        }

        return NSLocalizedString("relationship", bundle: bundle, comment: "")
      }

      /// en translation: Mối quan hệ*
      ///
      /// Locales: vi, en
      static func relationshipPlaceHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("relationshipPlaceHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "relationshipPlaceHolder"
        }

        return NSLocalizedString("relationshipPlaceHolder", bundle: bundle, comment: "")
      }

      /// en translation: Mở rộng
      ///
      /// Locales: vi, en
      static func smart_watch_s5_expand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_expand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_expand"
        }

        return NSLocalizedString("smart_watch_s5_expand", bundle: bundle, comment: "")
      }

      /// en translation: Mỡ
      ///
      /// Locales: vi, en
      static func detail_measurement_fat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_fat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_fat"
        }

        return NSLocalizedString("detail_measurement_fat", bundle: bundle, comment: "")
      }

      /// en translation: Mỡ (%)
      ///
      /// Locales: vi, en
      static func fatPercent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fatPercent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fatPercent"
        }

        return NSLocalizedString("fatPercent", bundle: bundle, comment: "")
      }

      /// en translation: Mỡ dưới da
      ///
      /// Locales: vi, en
      static func detail_measurement_subcutaneous_fat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_subcutaneous_fat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_subcutaneous_fat"
        }

        return NSLocalizedString("detail_measurement_subcutaneous_fat", bundle: bundle, comment: "")
      }

      /// en translation: Mỡ dưới da (%)
      ///
      /// Locales: vi, en
      static func subcutaneousFat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subcutaneousFat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subcutaneousFat"
        }

        return NSLocalizedString("subcutaneousFat", bundle: bundle, comment: "")
      }

      /// en translation: Mỡ nội tạng
      ///
      /// Locales: vi, en
      static func visceralFat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visceralFat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visceralFat"
        }

        return NSLocalizedString("visceralFat", bundle: bundle, comment: "")
      }

      /// en translation: Mỡ nội tạng là một loại chất béo trong cơ thể được lưu trữ trong khoang bụng. Mỡ nội tạng dư thừa làm tăng nguy cơ phát triển một số bệnh lý nghiêm trọng kéo dài. Thường xuyên theo dõi và đảm bảo chỉ số mỡ nội tạng nằm trong mức cho phép giúp bảo vệ và nâng cao sức khỏe hiệu quả.
      ///
      /// Locales: vi, en
      static func scale_result_detail_visceral_fat_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_visceral_fat_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_visceral_fat_description"
        }

        return NSLocalizedString("scale_result_detail_visceral_fat_description", bundle: bundle, comment: "")
      }

      /// en translation: Mục tiêu
      ///
      /// Locales: vi, en
      static func smart_watch_s5_goal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_goal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_goal"
        }

        return NSLocalizedString("smart_watch_s5_goal", bundle: bundle, comment: "")
      }

      /// en translation: Mục tiêu nước uống hàng ngày
      ///
      /// Locales: vi, en
      static func s5_water_setting_goal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_water_setting_goal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_water_setting_goal"
        }

        return NSLocalizedString("s5_water_setting_goal", bundle: bundle, comment: "")
      }

      /// en translation: Mục tiêu vận động
      ///
      /// Locales: vi, en
      static func s5_setting_type_movement_goal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_movement_goal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_movement_goal"
        }

        return NSLocalizedString("s5_setting_type_movement_goal", bundle: bundle, comment: "")
      }

      /// en translation: Mức độ béo phì
      ///
      /// Locales: vi, en
      static func obesityLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("obesityLevel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "obesityLevel"
        }

        return NSLocalizedString("obesityLevel", bundle: bundle, comment: "")
      }

      /// en translation: Nam
      ///
      /// Locales: vi, en
      static func male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "male"
        }

        return NSLocalizedString("male", bundle: bundle, comment: "")
      }

      /// en translation: Nguy hiểm
      ///
      /// Locales: vi, en
      static func dangerous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dangerous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dangerous"
        }

        return NSLocalizedString("dangerous", bundle: bundle, comment: "")
      }

      /// en translation: Ngày
      ///
      /// Locales: vi, en
      static func day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day"
        }

        return NSLocalizedString("day", bundle: bundle, comment: "")
      }

      /// en translation: Ngày sinh
      ///
      /// Locales: vi, en
      static func birthday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "birthday"
        }

        return NSLocalizedString("birthday", bundle: bundle, comment: "")
      }

      /// en translation: Người dùng này đã được liên kết với một tài khoản khác trước đây
      ///
      /// Locales: vi, en
      static func sync_linked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_linked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_linked"
        }

        return NSLocalizedString("sync_linked", bundle: bundle, comment: "")
      }

      /// en translation: Ngủ nông
      ///
      /// Locales: vi, en
      static func sleep_type_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_type_light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_type_light"
        }

        return NSLocalizedString("sleep_type_light", bundle: bundle, comment: "")
      }

      /// en translation: Ngủ sâu
      ///
      /// Locales: vi, en
      static func sleep_type_deep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_type_deep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_type_deep"
        }

        return NSLocalizedString("sleep_type_deep", bundle: bundle, comment: "")
      }

      /// en translation: Nhiệt độ
      ///
      /// Locales: vi, en
      static func smart_watch_s5_temperature(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_temperature", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_temperature"
        }

        return NSLocalizedString("smart_watch_s5_temperature", bundle: bundle, comment: "")
      }

      /// en translation: Nhiệt độ
      ///
      /// Locales: vi, en
      static func temperature(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("temperature", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "temperature"
        }

        return NSLocalizedString("temperature", bundle: bundle, comment: "")
      }

      /// en translation: Nhiệt độ cao nhất: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_max_temp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_max_temp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_max_temp"
        }

        return NSLocalizedString("smart_watch_s5_max_temp", bundle: bundle, comment: "")
      }

      /// en translation: Nhiệt độ thấp nhất: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_min_temp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_min_temp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_min_temp"
        }

        return NSLocalizedString("smart_watch_s5_min_temp", bundle: bundle, comment: "")
      }

      /// en translation: Nhiệt độ: %@ °C
      ///
      /// Locales: vi, en
      static func smart_watch_s5_temperature_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_temperature_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_temperature_input"
        }

        let format = NSLocalizedString("smart_watch_s5_temperature_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Nhóm máu
      ///
      /// Locales: vi, en
      static func bloodGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodGroup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bloodGroup"
        }

        return NSLocalizedString("bloodGroup", bundle: bundle, comment: "")
      }

      /// en translation: Nhắc nhở uống nước
      ///
      /// Locales: vi, en
      static func s5_setting_type_water_reminder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_water_reminder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_water_reminder"
        }

        return NSLocalizedString("s5_setting_type_water_reminder", bundle: bundle, comment: "")
      }

      /// en translation: Nhắc nhở uống nước
      ///
      /// Locales: vi, en
      static func s5_water_setting_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_water_setting_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_water_setting_title"
        }

        return NSLocalizedString("s5_water_setting_title", bundle: bundle, comment: "")
      }

      /// en translation: Nhắc nhở ít vận động
      ///
      /// Locales: vi, en
      static func s5_setting_type_sedentary_reminder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_sedentary_reminder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_sedentary_reminder"
        }

        return NSLocalizedString("s5_setting_type_sedentary_reminder", bundle: bundle, comment: "")
      }

      /// en translation: Nhịp tim
      ///
      /// Locales: vi, en
      static func heartRate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heartRate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "heartRate"
        }

        return NSLocalizedString("heartRate", bundle: bundle, comment: "")
      }

      /// en translation: Nhịp tim
      ///
      /// Locales: vi, en
      static func smart_watch_s5_heart_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_heart_rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_heart_rate"
        }

        return NSLocalizedString("smart_watch_s5_heart_rate", bundle: bundle, comment: "")
      }

      /// en translation: Nhịp tim cao nhất: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_max_hr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_max_hr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_max_hr"
        }

        return NSLocalizedString("smart_watch_s5_max_hr", bundle: bundle, comment: "")
      }

      /// en translation: Nhịp tim nghỉ: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_min_hr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_min_hr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_min_hr"
        }

        return NSLocalizedString("smart_watch_s5_min_hr", bundle: bundle, comment: "")
      }

      /// en translation: Nhịp tim trung bình
      ///
      /// Locales: vi, en
      static func spO2_detail_value_average_pr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spO2_detail_value_average_pr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_detail_value_average_pr"
        }

        return NSLocalizedString("spO2_detail_value_average_pr", bundle: bundle, comment: "")
      }

      /// en translation: Nhịp tim: %@ bpm
      ///
      /// Locales: vi, en
      static func smart_watch_s5_heart_rate_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_heart_rate_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_heart_rate_input"
        }

        let format = NSLocalizedString("smart_watch_s5_heart_rate_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Nâng cổ tay để bật màn hình
      ///
      /// Locales: vi, en
      static func s5_setting_type_turn_wrist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_turn_wrist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_turn_wrist"
        }

        return NSLocalizedString("s5_setting_type_turn_wrist", bundle: bundle, comment: "")
      }

      /// en translation: Năm
      ///
      /// Locales: vi, en
      static func year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "year"
        }

        return NSLocalizedString("year", bundle: bundle, comment: "")
      }

      /// en translation: Nước
      ///
      /// Locales: vi, en
      static func detail_measurement_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_water", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_water"
        }

        return NSLocalizedString("detail_measurement_water", bundle: bundle, comment: "")
      }

      /// en translation: Nước (%)
      ///
      /// Locales: vi, en
      static func water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water"
        }

        return NSLocalizedString("water", bundle: bundle, comment: "")
      }

      /// en translation: Nữ
      ///
      /// Locales: vi, en
      static func female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "female"
        }

        return NSLocalizedString("female", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: vi, en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: Oxy máu
      ///
      /// Locales: vi, en
      static func smart_watch_s5_spO2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_spO2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_spO2"
        }

        return NSLocalizedString("smart_watch_s5_spO2", bundle: bundle, comment: "")
      }

      /// en translation: Oxy máu thấp nhất: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_min_spO2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_min_spO2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_min_spO2"
        }

        return NSLocalizedString("smart_watch_s5_min_spO2", bundle: bundle, comment: "")
      }

      /// en translation: Oxy máu trung bình
      ///
      /// Locales: vi, en
      static func smart_watch_s5_average_spO2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_average_spO2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_average_spO2"
        }

        return NSLocalizedString("smart_watch_s5_average_spO2", bundle: bundle, comment: "")
      }

      /// en translation: Oxy máu: 
      ///
      /// Locales: vi, en
      static func smart_watch_s5_max_spO2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_max_spO2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_max_spO2"
        }

        return NSLocalizedString("smart_watch_s5_max_spO2", bundle: bundle, comment: "")
      }

      /// en translation: Oxy máu: %@
      ///
      /// Locales: vi, en
      static func smart_watch_s5_spO2_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_spO2_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_spO2_input"
        }

        let format = NSLocalizedString("smart_watch_s5_spO2_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: PR
      ///
      /// Locales: vi, en
      static func pR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "PR"
        }

        return NSLocalizedString("PR", bundle: bundle, comment: "")
      }

      /// en translation: Phiên bản phần mềm
      ///
      /// Locales: vi, en
      static func s5_setting_type_s5_version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_s5_version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_s5_version"
        }

        return NSLocalizedString("s5_setting_type_s5_version", bundle: bundle, comment: "")
      }

      /// en translation: Phép đo không thành công
      ///
      /// Locales: vi, en
      static func weightMeasuringFalseMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weightMeasuringFalseMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weightMeasuringFalseMessage"
        }

        return NSLocalizedString("weightMeasuringFalseMessage", bundle: bundle, comment: "")
      }

      /// en translation: Protein
      ///
      /// Locales: vi, en
      static func detail_measurement_protein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_protein", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_protein"
        }

        return NSLocalizedString("detail_measurement_protein", bundle: bundle, comment: "")
      }

      /// en translation: Protein
      ///
      /// Locales: vi, en
      static func scale_result_detail_protein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_protein", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_protein"
        }

        return NSLocalizedString("scale_result_detail_protein", bundle: bundle, comment: "")
      }

      /// en translation: Protein (%)
      ///
      /// Locales: vi, en
      static func protein(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("protein", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "protein"
        }

        return NSLocalizedString("protein", bundle: bundle, comment: "")
      }

      /// en translation: Quãng đường
      ///
      /// Locales: vi, en
      static func distance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("distance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "distance"
        }

        return NSLocalizedString("distance", bundle: bundle, comment: "")
      }

      /// en translation: REM
      ///
      /// Locales: vi, en
      static func sleep_type_rem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_type_rem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_type_rem"
        }

        return NSLocalizedString("sleep_type_rem", bundle: bundle, comment: "")
      }

      /// en translation: Rất cao
      ///
      /// Locales: vi, en
      static func veryHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("veryHigh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "veryHigh"
        }

        return NSLocalizedString("veryHigh", bundle: bundle, comment: "")
      }

      /// en translation: Rất nguy hiểm
      ///
      /// Locales: vi, en
      static func veryDangerous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("veryDangerous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "veryDangerous"
        }

        return NSLocalizedString("veryDangerous", bundle: bundle, comment: "")
      }

      /// en translation: Sinh hiệu
      ///
      /// Locales: vi, en
      static func significance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("significance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "significance"
        }

        return NSLocalizedString("significance", bundle: bundle, comment: "")
      }

      /// en translation: SpO2
      ///
      /// Locales: vi, en
      static func spO2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spO2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2"
        }

        return NSLocalizedString("spO2", bundle: bundle, comment: "")
      }

      /// en translation: SpO2 thấp nhất
      ///
      /// Locales: vi, en
      static func spO2_detail_value_min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spO2_detail_value_min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_detail_value_min"
        }

        return NSLocalizedString("spO2_detail_value_min", bundle: bundle, comment: "")
      }

      /// en translation: SpO2 trung bình
      ///
      /// Locales: vi, en
      static func spO2_detail_value_average(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spO2_detail_value_average", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_detail_value_average"
        }

        return NSLocalizedString("spO2_detail_value_average", bundle: bundle, comment: "")
      }

      /// en translation: Số bước trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static func sm_excercise_average_step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_average_step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_average_step"
        }

        return NSLocalizedString("sm_excercise_average_step", bundle: bundle, comment: "")
      }

      /// en translation: Số bước trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static func sm_excercise_average_step_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_average_step_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_average_step_month"
        }

        return NSLocalizedString("sm_excercise_average_step_month", bundle: bundle, comment: "")
      }

      /// en translation: Số bước đi bộ
      ///
      /// Locales: vi, en
      static func smart_watch_s5_step_count(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_step_count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_step_count"
        }

        return NSLocalizedString("smart_watch_s5_step_count", bundle: bundle, comment: "")
      }

      /// en translation: Số bước:
      ///
      /// Locales: vi, en
      static func sm_excercise_number_of_step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_number_of_step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_number_of_step"
        }

        return NSLocalizedString("sm_excercise_number_of_step", bundle: bundle, comment: "")
      }

      /// en translation: Số cốc
      ///
      /// Locales: vi, en
      static func s5_water_setting_cup_numbers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_water_setting_cup_numbers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_water_setting_cup_numbers"
        }

        return NSLocalizedString("s5_water_setting_cup_numbers", bundle: bundle, comment: "")
      }

      /// en translation: T2
      ///
      /// Locales: vi, en
      static func monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("monday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "monday"
        }

        return NSLocalizedString("monday", bundle: bundle, comment: "")
      }

      /// en translation: T3
      ///
      /// Locales: vi, en
      static func tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tuesday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tuesday"
        }

        return NSLocalizedString("tuesday", bundle: bundle, comment: "")
      }

      /// en translation: T4
      ///
      /// Locales: vi, en
      static func wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wednesday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wednesday"
        }

        return NSLocalizedString("wednesday", bundle: bundle, comment: "")
      }

      /// en translation: T5
      ///
      /// Locales: vi, en
      static func thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thursday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thursday"
        }

        return NSLocalizedString("thursday", bundle: bundle, comment: "")
      }

      /// en translation: T6
      ///
      /// Locales: vi, en
      static func friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("friday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "friday"
        }

        return NSLocalizedString("friday", bundle: bundle, comment: "")
      }

      /// en translation: T7
      ///
      /// Locales: vi, en
      static func saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saturday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saturday"
        }

        return NSLocalizedString("saturday", bundle: bundle, comment: "")
      }

      /// en translation: Theo dõi
      ///
      /// Locales: vi, en
      static func tracking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tracking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tracking"
        }

        return NSLocalizedString("tracking", bundle: bundle, comment: "")
      }

      /// en translation: Thiết bị
      ///
      /// Locales: vi, en
      static func device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "device"
        }

        return NSLocalizedString("device", bundle: bundle, comment: "")
      }

      /// en translation: Thiết bị của tôi
      ///
      /// Locales: vi, en
      static func myDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myDevice"
        }

        return NSLocalizedString("myDevice", bundle: bundle, comment: "")
      }

      /// en translation: Thiết bị không trả về kết quả do quá thời gian đo. Bạn hãy vui lòng ngồi đúng tư thế, kiểm tra và đeo lại thiết bị đo và thực hiện lại sau khi đã chuẩn bị xong
      ///
      /// Locales: vi, en
      static func biolight_error_timeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_error_timeout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_error_timeout"
        }

        return NSLocalizedString("biolight_error_timeout", bundle: bundle, comment: "")
      }

      /// en translation: Thiết bị đo
      ///
      /// Locales: vi, en
      static func deviceMeasurementIndex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deviceMeasurementIndex", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deviceMeasurementIndex"
        }

        return NSLocalizedString("deviceMeasurementIndex", bundle: bundle, comment: "")
      }

      /// en translation: Thiếu
      ///
      /// Locales: vi, en
      static func scale_result_short_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_short_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_short_description"
        }

        return NSLocalizedString("scale_result_short_description", bundle: bundle, comment: "")
      }

      /// en translation: Thiếu cân
      ///
      /// Locales: vi, en
      static func underWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("underWeight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "underWeight"
        }

        return NSLocalizedString("underWeight", bundle: bundle, comment: "")
      }

      /// en translation: Thiếu vận động
      ///
      /// Locales: vi, en
      static func lackofexercise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lackofexercise", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lackofexercise"
        }

        return NSLocalizedString("lackofexercise", bundle: bundle, comment: "")
      }

      /// en translation: Thu gọn
      ///
      /// Locales: vi, en
      static func smart_watch_s5_collapse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_collapse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_collapse"
        }

        return NSLocalizedString("smart_watch_s5_collapse", bundle: bundle, comment: "")
      }

      /// en translation: Tháng
      ///
      /// Locales: vi, en
      static func month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month"
        }

        return NSLocalizedString("month", bundle: bundle, comment: "")
      }

      /// en translation: Thêm hồ sơ
      ///
      /// Locales: vi, en
      static func addProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addProfile"
        }

        return NSLocalizedString("addProfile", bundle: bundle, comment: "")
      }

      /// en translation: Thêm mới
      ///
      /// Locales: vi, en
      static func addNew(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addNew", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addNew"
        }

        return NSLocalizedString("addNew", bundle: bundle, comment: "")
      }

      /// en translation: Thêm thiết bị
      ///
      /// Locales: vi, en
      static func addDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addDevice"
        }

        return NSLocalizedString("addDevice", bundle: bundle, comment: "")
      }

      /// en translation: Thông báo
      ///
      /// Locales: vi, en
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification"
        }

        return NSLocalizedString("notification", bundle: bundle, comment: "")
      }

      /// en translation: Thông báo
      ///
      /// Locales: vi, en
      static func s5_setting_type_notice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_notice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_notice"
        }

        return NSLocalizedString("s5_setting_type_notice", bundle: bundle, comment: "")
      }

      /// en translation: Thấp
      ///
      /// Locales: vi, en
      static func low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("low", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "low"
        }

        return NSLocalizedString("low", bundle: bundle, comment: "")
      }

      /// en translation: Thể tích cốc nước
      ///
      /// Locales: vi, en
      static func s5_water_setting_cup_volume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_water_setting_cup_volume", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_water_setting_cup_volume"
        }

        return NSLocalizedString("s5_water_setting_cup_volume", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian
      ///
      /// Locales: vi, en
      static func time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "time"
        }

        return NSLocalizedString("time", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian ngủ trung bình hàng ngày %@
      ///
      /// Locales: vi, en
      static func smart_watch_s5_average_sleep_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_average_sleep_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_average_sleep_input"
        }

        let format = NSLocalizedString("smart_watch_s5_average_sleep_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Thời gian theo dõi: %@
      ///
      /// Locales: vi, en
      static func spO2_detail_value_time_measure(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("spO2_detail_value_time_measure", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_detail_value_time_measure"
        }

        let format = NSLocalizedString("spO2_detail_value_time_measure", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Thời gian tập luyện
      ///
      /// Locales: vi, en
      static func sm_practice_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_practice_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_practice_time"
        }

        return NSLocalizedString("sm_practice_time", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian tập luyện trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static func sm_practice_avg_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_practice_avg_day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_practice_avg_day"
        }

        return NSLocalizedString("sm_practice_avg_day", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian tập luyện trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static func sm_practice_avg_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_practice_avg_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_practice_avg_month"
        }

        return NSLocalizedString("sm_practice_avg_month", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian vận động
      ///
      /// Locales: vi, en
      static func sm_excersise_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excersise_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excersise_time"
        }

        return NSLocalizedString("sm_excersise_time", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian vận động trung bình hàng ngày:
      ///
      /// Locales: vi, en
      static func sm_excercise_avg_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_avg_day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_avg_day"
        }

        return NSLocalizedString("sm_excercise_avg_day", bundle: bundle, comment: "")
      }

      /// en translation: Thời gian vận động trung bình hàng tháng:
      ///
      /// Locales: vi, en
      static func sm_excercise_avg_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_avg_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_avg_month"
        }

        return NSLocalizedString("sm_excercise_avg_month", bundle: bundle, comment: "")
      }

      /// en translation: Thức
      ///
      /// Locales: vi, en
      static func sleep_type_asleep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sleep_type_asleep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sleep_type_asleep"
        }

        return NSLocalizedString("sleep_type_asleep", bundle: bundle, comment: "")
      }

      /// en translation: Thừa
      ///
      /// Locales: vi, en
      static func scale_result_excess_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_excess_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_excess_description"
        }

        return NSLocalizedString("scale_result_excess_description", bundle: bundle, comment: "")
      }

      /// en translation: Thừa cân
      ///
      /// Locales: vi, en
      static func overWeight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("overWeight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "overWeight"
        }

        return NSLocalizedString("overWeight", bundle: bundle, comment: "")
      }

      /// en translation: Tiêu chuẩn
      ///
      /// Locales: vi, en
      static func scale_result_standar_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_standar_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_standar_description"
        }

        return NSLocalizedString("scale_result_standar_description", bundle: bundle, comment: "")
      }

      /// en translation: Tiếp
      ///
      /// Locales: vi, en
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: Tiền tăng huyết áp
      ///
      /// Locales: vi, en
      static func biolight_detail_blood_pressure_pre_hypertension(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_detail_blood_pressure_pre_hypertension", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_detail_blood_pressure_pre_hypertension"
        }

        return NSLocalizedString("biolight_detail_blood_pressure_pre_hypertension", bundle: bundle, comment: "")
      }

      /// en translation: Trang chủ
      ///
      /// Locales: vi, en
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// en translation: Trung bình
      ///
      /// Locales: vi, en
      static func average(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("average", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "average"
        }

        return NSLocalizedString("average", bundle: bundle, comment: "")
      }

      /// en translation: Tuần
      ///
      /// Locales: vi, en
      static func week(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "week"
        }

        return NSLocalizedString("week", bundle: bundle, comment: "")
      }

      /// en translation: Tài khoản này đã được liên kết với người dùng khác
      ///
      /// Locales: vi, en
      static func sync_linked_user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_linked_user", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_linked_user"
        }

        return NSLocalizedString("sync_linked_user", bundle: bundle, comment: "")
      }

      /// en translation: Tâm thu: %@ - %@ mmHg
      ///
      /// Locales: vi, en
      static func blood_pressure_value_sys(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("blood_pressure_value_sys", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blood_pressure_value_sys"
        }

        let format = NSLocalizedString("blood_pressure_value_sys", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Tâm thu: %@ mmHg
      ///
      /// Locales: vi, en
      static func blood_pressure_value_sys_day(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("blood_pressure_value_sys_day", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blood_pressure_value_sys_day"
        }

        let format = NSLocalizedString("blood_pressure_value_sys_day", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Tâm trương: %@ - %@ mmHg
      ///
      /// Locales: vi, en
      static func blood_pressure_value_dia(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("blood_pressure_value_dia", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blood_pressure_value_dia"
        }

        let format = NSLocalizedString("blood_pressure_value_dia", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Tâm trương: %@ mmHg
      ///
      /// Locales: vi, en
      static func blood_pressure_value_dia_day(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("blood_pressure_value_dia_day", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blood_pressure_value_dia_day"
        }

        let format = NSLocalizedString("blood_pressure_value_dia_day", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Tên tối thiểu phải từ 2 ký tự đổ lên
      ///
      /// Locales: vi, en
      static func minNameLengthMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minNameLengthMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minNameLengthMessage"
        }

        return NSLocalizedString("minNameLengthMessage", bundle: bundle, comment: "")
      }

      /// en translation: Tìm hiểu thêm thông tin sức khỏe ở
      ///
      /// Locales: vi, en
      static func scale_result_detail_discovery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_detail_discovery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_detail_discovery"
        }

        return NSLocalizedString("scale_result_detail_discovery", bundle: bundle, comment: "")
      }

      /// en translation: Tìm kiếm vòng đeo tay
      ///
      /// Locales: vi, en
      static func s5_setting_type_searching_s5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_searching_s5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_searching_s5"
        }

        return NSLocalizedString("s5_setting_type_searching_s5", bundle: bundle, comment: "")
      }

      /// en translation: Tìm thiết bị
      ///
      /// Locales: vi, en
      static func findDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("findDevice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "findDevice"
        }

        return NSLocalizedString("findDevice", bundle: bundle, comment: "")
      }

      /// en translation: Tôi
      ///
      /// Locales: vi, en
      static func yourself(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yourself", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yourself"
        }

        return NSLocalizedString("yourself", bundle: bundle, comment: "")
      }

      /// en translation: Tăng huyết áp độ 1
      ///
      /// Locales: vi, en
      static func biolight_detail_blood_pressure_high_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_detail_blood_pressure_high_1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_detail_blood_pressure_high_1"
        }

        return NSLocalizedString("biolight_detail_blood_pressure_high_1", bundle: bundle, comment: "")
      }

      /// en translation: Tăng huyết áp độ 2
      ///
      /// Locales: vi, en
      static func biolight_detail_blood_pressure_high_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("biolight_detail_blood_pressure_high_2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "biolight_detail_blood_pressure_high_2"
        }

        return NSLocalizedString("biolight_detail_blood_pressure_high_2", bundle: bundle, comment: "")
      }

      /// en translation: TẠO HỒ SƠ
      ///
      /// Locales: vi, en
      static func createProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createProfile"
        }

        return NSLocalizedString("createProfile", bundle: bundle, comment: "")
      }

      /// en translation: Tắt
      ///
      /// Locales: vi, en
      static func smart_watch_s5_is_off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_is_off", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_is_off"
        }

        return NSLocalizedString("smart_watch_s5_is_off", bundle: bundle, comment: "")
      }

      /// en translation: Tối ưu
      ///
      /// Locales: vi, en
      static func scale_result_optimal_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_optimal_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_optimal_description"
        }

        return NSLocalizedString("scale_result_optimal_description", bundle: bundle, comment: "")
      }

      /// en translation: Tốt
      ///
      /// Locales: vi, en
      static func scale_result_find_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scale_result_find_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scale_result_find_description"
        }

        return NSLocalizedString("scale_result_find_description", bundle: bundle, comment: "")
      }

      /// en translation: Tổng quãng đường:
      ///
      /// Locales: vi, en
      static func sm_excercise_total_distance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_total_distance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_total_distance"
        }

        return NSLocalizedString("sm_excercise_total_distance", bundle: bundle, comment: "")
      }

      /// en translation: Tổng số bước hàng ngày/mục tiêu
      ///
      /// Locales: vi, en
      static func sm_excercise_total_per_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_total_per_day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_total_per_day"
        }

        return NSLocalizedString("sm_excercise_total_per_day", bundle: bundle, comment: "")
      }

      /// en translation: Tổng số bước:
      ///
      /// Locales: vi, en
      static func sm_excercise_total_step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sm_excercise_total_step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sm_excercise_total_step"
        }

        return NSLocalizedString("sm_excercise_total_step", bundle: bundle, comment: "")
      }

      /// en translation: Tổng thời gian ngủ: %@
      ///
      /// Locales: vi, en
      static func smart_watch_s5_total_sleep_input(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("smart_watch_s5_total_sleep_input", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_total_sleep_input"
        }

        let format = NSLocalizedString("smart_watch_s5_total_sleep_input", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Từ %@ đến %@
      ///
      /// Locales: vi, en
      static func spO2_detail_value_from_to(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("spO2_detail_value_from_to", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_detail_value_from_to"
        }

        let format = NSLocalizedString("spO2_detail_value_from_to", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Tự động đồng bộ dữ liệu
      ///
      /// Locales: vi, en
      static func sync_auto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_auto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_auto"
        }

        return NSLocalizedString("sync_auto", bundle: bundle, comment: "")
      }

      /// en translation: Uống nước rất cần thiết cho sức khỏe và ngăn ngừa mất nước. Mỗi người cần một lượng nước khác nhau. Thông thường chúng ta cần ít nhất 2L nước mỗi ngày
      ///
      /// Locales: vi, en
      static func s5_water_setting_remind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_water_setting_remind", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_water_setting_remind"
        }

        return NSLocalizedString("s5_water_setting_remind", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng nhập mối quan hệ
      ///
      /// Locales: vi, en
      static func relationshipFieldRequire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("relationshipFieldRequire", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "relationshipFieldRequire"
        }

        return NSLocalizedString("relationshipFieldRequire", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng nhập ngày sinh
      ///
      /// Locales: vi, en
      static func birthDayFieldRequire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birthDayFieldRequire", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "birthDayFieldRequire"
        }

        return NSLocalizedString("birthDayFieldRequire", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng nhập tên
      ///
      /// Locales: vi, en
      static func nameFieldRequire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nameFieldRequire", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nameFieldRequire"
        }

        return NSLocalizedString("nameFieldRequire", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng tạo hồ sơ để lưu các chỉ số liên quan đến sức khoẻ của bạn.
      ///
      /// Locales: vi, en
      static func createFirstProfileText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createFirstProfileText", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createFirstProfileText"
        }

        return NSLocalizedString("createFirstProfileText", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng đứng lên cân.
      ///
      /// Locales: vi, en
      static func standOnTheScale(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("standOnTheScale", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "standOnTheScale"
        }

        return NSLocalizedString("standOnTheScale", bundle: bundle, comment: "")
      }

      /// en translation: Vóc dáng
      ///
      /// Locales: vi, en
      static func bodyShape(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bodyShape", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bodyShape"
        }

        return NSLocalizedString("bodyShape", bundle: bundle, comment: "")
      }

      /// en translation: Vận tốc
      ///
      /// Locales: vi, en
      static func speed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("speed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "speed"
        }

        return NSLocalizedString("speed", bundle: bundle, comment: "")
      }

      /// en translation: Vận động
      ///
      /// Locales: vi, en
      static func move(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("move", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "move"
        }

        return NSLocalizedString("move", bundle: bundle, comment: "")
      }

      /// en translation: Vận động
      ///
      /// Locales: vi, en
      static func smart_watch_s5_exercise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_exercise", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_exercise"
        }

        return NSLocalizedString("smart_watch_s5_exercise", bundle: bundle, comment: "")
      }

      /// en translation: Vận động viên thể hình
      ///
      /// Locales: vi, en
      static func lThinMuscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lThinMuscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lThinMuscle"
        }

        return NSLocalizedString("lThinMuscle", bundle: bundle, comment: "")
      }

      /// en translation: Vận động viên điền kinh
      ///
      /// Locales: vi, en
      static func standardMuscle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("standardMuscle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "standardMuscle"
        }

        return NSLocalizedString("standardMuscle", bundle: bundle, comment: "")
      }

      /// en translation: Vị trí gót chân và ngón chân đứng đúng vào vị trí cảm biến.
      ///
      /// Locales: vi, en
      static func positionHeelAndToe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("positionHeelAndToe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "positionHeelAndToe"
        }

        return NSLocalizedString("positionHeelAndToe", bundle: bundle, comment: "")
      }

      /// en translation: Vợ
      ///
      /// Locales: vi, en
      static func wife(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wife", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wife"
        }

        return NSLocalizedString("wife", bundle: bundle, comment: "")
      }

      /// en translation: Xe đạp
      ///
      /// Locales: vi, en
      static func s5_sport_type_bike(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_sport_type_bike", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_sport_type_bike"
        }

        return NSLocalizedString("s5_sport_type_bike", bundle: bundle, comment: "")
      }

      /// en translation: Xác nhận
      ///
      /// Locales: vi, en
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: Xương
      ///
      /// Locales: vi, en
      static func detail_measurement_bone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail_measurement_bone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail_measurement_bone"
        }

        return NSLocalizedString("detail_measurement_bone", bundle: bundle, comment: "")
      }

      /// en translation: Xương (kg)
      ///
      /// Locales: vi, en
      static func bone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bone"
        }

        return NSLocalizedString("bone", bundle: bundle, comment: "")
      }

      /// en translation: bước
      ///
      /// Locales: vi, en
      static func smart_watch_s5_step(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_step"
        }

        return NSLocalizedString("smart_watch_s5_step", bundle: bundle, comment: "")
      }

      /// en translation: bước/ngày
      ///
      /// Locales: vi, en
      static func smart_watch_s5_step_per_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_step_per_day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_step_per_day"
        }

        return NSLocalizedString("smart_watch_s5_step_per_day", bundle: bundle, comment: "")
      }

      /// en translation: giờ
      ///
      /// Locales: vi, en
      static func hour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hour"
        }

        return NSLocalizedString("hour", bundle: bundle, comment: "")
      }

      /// en translation: kcal/ngày
      ///
      /// Locales: vi, en
      static func kcalPerDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kcalPerDay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kcalPerDay"
        }

        return NSLocalizedString("kcalPerDay", bundle: bundle, comment: "")
      }

      /// en translation: phút
      ///
      /// Locales: vi, en
      static func minute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minute"
        }

        return NSLocalizedString("minute", bundle: bundle, comment: "")
      }

      /// en translation: Áp dụng
      ///
      /// Locales: vi, en
      static func apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apply"
        }

        return NSLocalizedString("apply", bundle: bundle, comment: "")
      }

      /// en translation: Đang tải kết quả đo từ thiết bị.
      ///
      /// Locales: vi, en
      static func spO2_download_files_downloading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spO2_download_files_downloading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spO2_download_files_downloading"
        }

        return NSLocalizedString("spO2_download_files_downloading", bundle: bundle, comment: "")
      }

      /// en translation: Đang đo...
      ///
      /// Locales: vi, en
      static func measuring(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("measuring", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "measuring"
        }

        return NSLocalizedString("measuring", bundle: bundle, comment: "")
      }

      /// en translation: Đi bộ
      ///
      /// Locales: vi, en
      static func s5_sport_type_walk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_sport_type_walk", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_sport_type_walk"
        }

        return NSLocalizedString("s5_sport_type_walk", bundle: bundle, comment: "")
      }

      /// en translation: Đi bộ
      ///
      /// Locales: vi, en
      static func walk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("walk", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "walk"
        }

        return NSLocalizedString("walk", bundle: bundle, comment: "")
      }

      /// en translation: Đo
      ///
      /// Locales: vi, en
      static func measurement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("measurement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "measurement"
        }

        return NSLocalizedString("measurement", bundle: bundle, comment: "")
      }

      /// en translation: Đo cân nặng
      ///
      /// Locales: vi, en
      static func weightMeasuring(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weightMeasuring", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weightMeasuring"
        }

        return NSLocalizedString("weightMeasuring", bundle: bundle, comment: "")
      }

      /// en translation: Đo nhiệt độ định kì
      ///
      /// Locales: vi, en
      static func s5_setting_type_auto_temp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_auto_temp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_auto_temp"
        }

        return NSLocalizedString("s5_setting_type_auto_temp", bundle: bundle, comment: "")
      }

      /// en translation: Đo nhịp tim định kì
      ///
      /// Locales: vi, en
      static func s5_setting_type_auto_heart_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_auto_heart_rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_auto_heart_rate"
        }

        return NSLocalizedString("s5_setting_type_auto_heart_rate", bundle: bundle, comment: "")
      }

      /// en translation: Đã bỏ liên kết với thiết bị
      ///
      /// Locales: vi, en
      static func unlinkDeviceSuccessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlinkDeviceSuccessMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlinkDeviceSuccessMessage"
        }

        return NSLocalizedString("unlinkDeviceSuccessMessage", bundle: bundle, comment: "")
      }

      /// en translation: Đã kết nối
      ///
      /// Locales: vi, en
      static func connected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "connected"
        }

        return NSLocalizedString("connected", bundle: bundle, comment: "")
      }

      /// en translation: Đã kết nối với tài khoản 1SK %@
      ///
      /// Locales: vi, en
      static func sync_linked_account(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("sync_linked_account", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_linked_account"
        }

        let format = NSLocalizedString("sync_linked_account", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Đã kết nối với tài khoản facebook
      ///
      /// Locales: vi, en
      static func sync_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_facebook"
        }

        return NSLocalizedString("sync_facebook", bundle: bundle, comment: "")
      }

      /// en translation: Đóng
      ///
      /// Locales: vi, en
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      /// en translation: Đơn vị: bước
      ///
      /// Locales: vi, en
      static func s5_setting_type_step_unit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("s5_setting_type_step_unit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "s5_setting_type_step_unit"
        }

        return NSLocalizedString("s5_setting_type_step_unit", bundle: bundle, comment: "")
      }

      /// en translation: Đường huyết
      ///
      /// Locales: vi, en
      static func bloodSugar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bloodSugar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bloodSugar"
        }

        return NSLocalizedString("bloodSugar", bundle: bundle, comment: "")
      }

      /// en translation: Đạp xe
      ///
      /// Locales: vi, en
      static func cycling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cycling", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cycling"
        }

        return NSLocalizedString("cycling", bundle: bundle, comment: "")
      }

      /// en translation: Đặt mục tiêu số bước hàng ngày để giúp bạn luôn năng động và khỏe mạnh.
      ///
      /// Locales: vi, en
      static func smart_watch_s5_goal_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smart_watch_s5_goal_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "smart_watch_s5_goal_title"
        }

        return NSLocalizedString("smart_watch_s5_goal_title", bundle: bundle, comment: "")
      }

      /// en translation: Đồng bộ dữ liệu
      ///
      /// Locales: vi, en
      static func syncData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("syncData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "syncData"
        }

        return NSLocalizedString("syncData", bundle: bundle, comment: "")
      }

      /// en translation: Đồng bộ dữ liệu các hồ sơ lên hệ thống 1SK, việc này giúp bạn: • Truy cập và xem dữ liệu với bất kỳ thiết bị nào bạn có. • Dữ liệu được đồng bộ xuyên suốt giữa 1SK và 1SK.Connect. • Chia sẻ các chỉ số sức khỏe cho bác sĩ, tạo thuận lợi cho việc tư vấn sức khỏe được nhanh và tốt hơn.
      ///
      /// Locales: vi, en
      static func sync_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_description"
        }

        return NSLocalizedString("sync_description", bundle: bundle, comment: "")
      }

      /// en translation: Đồng bộ lần cuối %@:%@, %@ tháng %@, %@
      ///
      /// Locales: vi, en
      static func sync_last_date(_ value1: String, _ value2: String, _ value3: String, _ value4: String, _ value5: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("sync_last_date", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4, value5)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_last_date"
        }

        let format = NSLocalizedString("sync_last_date", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4, value5)
      }

      /// en translation: Đồng bộ thành công
      ///
      /// Locales: vi, en
      static func sync_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_success"
        }

        return NSLocalizedString("sync_success", bundle: bundle, comment: "")
      }

      /// en translation: Đồng bộ thất bại
      ///
      /// Locales: vi, en
      static func sync_fail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_fail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_fail"
        }

        return NSLocalizedString("sync_fail", bundle: bundle, comment: "")
      }

      /// en translation: Đồng bộ tài khoản
      ///
      /// Locales: vi, en
      static func sync_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sync_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sync_account"
        }

        return NSLocalizedString("sync_account", bundle: bundle, comment: "")
      }

      /// en translation: Đồng ý
      ///
      /// Locales: vi, en
      static func agree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("agree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "agree"
        }

        return NSLocalizedString("agree", bundle: bundle, comment: "")
      }

      /// en translation: Đừng bỏ lỡ thông báo hấp dẫn mỗi ngày từ 1SK
      ///
      /// Locales: vi, en
      static func dontMissNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dontMissNotification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dontMissNotification"
        }

        return NSLocalizedString("dontMissNotification", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddDeviceCollectionViewCell.validate()
      try _AddProfileCollectionViewCell.validate()
      try _BiolightDeviceTableViewCell.validate()
      try _BloodPressureResultViewController.validate()
      try _BloodPressureViewController.validate()
      try _CreateDefautlsProfileViewController.validate()
      try _DeviceCollectionViewCell.validate()
      try _DeviceTableViewCell.validate()
      try _DownloadDataViewController.validate()
      try _ExcerciseActivityTBVCell.validate()
      try _ExcerciseChartCLVCell.validate()
      try _ExerciseDetailTableViewCell.validate()
      try _HealthProfileDetailsViewController.validate()
      try _HistoryBpResultTBVCell.validate()
      try _HistoryWeightResultTableViewCell.validate()
      try _MainHomeViewController.validate()
      try _NotificationViewController.validate()
      try _S5BloodPressureChartCollectionViewCell.validate()
      try _S5BloodPressureTableViewCell.validate()
      try _S5DeviceSettingTableViewCell.validate()
      try _S5ExerciseTableViewCell.validate()
      try _S5GoalViewController.validate()
      try _S5HeartRateChartCollectionViewCell.validate()
      try _S5HeartRateTableViewCell.validate()
      try _S5SleepChartCollectionViewCell.validate()
      try _S5SleepTableViewCell.validate()
      try _S5SmartWatchDeviceTBVCell.validate()
      try _S5SpO2ChartCollectionViewCell.validate()
      try _S5SpO2TableViewCell.validate()
      try _S5StepActivityTBVCell.validate()
      try _S5TemperatureChartCollectionViewCell.validate()
      try _S5TenperatureTableViewCell.validate()
      try _ScaleActivityTableViewCell.validate()
      try _ScaleResultDetailViewController.validate()
      try _ScaleResultViewController.validate()
      try _ScaleViewController.validate()
      try _SignificanceTBVCell.validate()
      try _SmartWatchS5ViewController.validate()
      try _SpO2TableViewCell.validate()
      try _SpO2ViewController.validate()
      try _StartViewController.validate()
      try _SyncSettingViewController.validate()
      try _SyncTableViewCell.validate()
      try _TrackingViewController.validate()
      try _WeightActivityTableViewCell.validate()
      try _WeightDetailsCollectionViewCell.validate()
      try _WeightMeasuringViewController.validate()
    }

    struct _AddDeviceCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddDeviceCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddDeviceCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddDeviceCollectionViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'AddDeviceCollectionViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'AddDeviceCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddProfileCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddProfileCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddProfileCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddProfileCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in nib 'AddProfileCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'AddProfileCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AlertViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AlertViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _BiolightDeviceTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BiolightDeviceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BiolightDeviceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BiolightDeviceTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_blood_pressure", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blood_pressure' is used in nib 'BiolightDeviceTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_love_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_love_black' is used in nib 'BiolightDeviceTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'BiolightDeviceTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'BiolightDeviceTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'BiolightDeviceTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BloodPressureGraphView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BloodPressureGraphView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _BloodPressureResultViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BloodPressureResultViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_bp_error_state", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bp_error_state' is used in nib 'BloodPressureResultViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'BloodPressureResultViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_love_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_love_black' is used in nib 'BloodPressureResultViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BloodPressureViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BloodPressureViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_phone_ble", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_ble' is used in nib 'BloodPressureViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'BloodPressureViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'BloodPressureViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'BloodPressureViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BodyTypeCollecionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BodyTypeCollecionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BodyTypeCollecionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BodyTypeCollecionViewCell
      }

      fileprivate init() {}
    }

    struct _CreateDefautlsProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateDefautlsProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_camera_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_2' is used in nib 'CreateDefautlsProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioButton_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radioButton_selected' is used in nib 'CreateDefautlsProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioButton_unSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radioButton_unSelected' is used in nib 'CreateDefautlsProfileViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkText' is used in nib 'CreateDefautlsProfileViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'CreateDefautlsProfileViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DeviceCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DeviceCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "scales", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scales' is used in nib 'DeviceCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'DeviceCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DeviceTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DeviceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_link", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_link' is used in nib 'DeviceTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'DeviceTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'DeviceTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DeviceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeviceViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DownloadDataViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DownloadDataViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_down' is used in nib 'DownloadDataViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_link_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_link_2' is used in nib 'DownloadDataViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'DownloadDataViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'DownloadDataViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ExcerciseActivityTBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExcerciseActivityTBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExcerciseActivityTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExcerciseActivityTBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'ExcerciseActivityTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_step_count", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_step_count' is used in nib 'ExcerciseActivityTBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'ExcerciseActivityTBVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'ExcerciseActivityTBVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ExcerciseChartCLVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExcerciseChartCLVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExcerciseChartCLVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExcerciseChartCLVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'ExcerciseChartCLVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'ExcerciseChartCLVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'ExcerciseChartCLVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ExcerciseDetailWMYTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExcerciseDetailWMYTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExcerciseDetailWMYTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExcerciseDetailWMYTableViewCell
      }

      fileprivate init() {}
    }

    struct _ExerciseDetailTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExerciseDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExerciseDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExerciseDetailTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_distance", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_distance' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_kcal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_kcal' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_step", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_step' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'ExerciseDetailTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HealthProfileDetailsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HealthProfileDetailsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_2' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioButton_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radioButton_selected' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioButton_unSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radioButton_unSelected' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkText' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in nib 'HealthProfileDetailsViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HistoryBpResultTBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HistoryBpResultTBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryBpResultTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryBpResultTBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'HistoryBpResultTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_love_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_love_black' is used in nib 'HistoryBpResultTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'HistoryBpResultTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_not_sync", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_not_sync' is used in nib 'HistoryBpResultTBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HistoryWeightResultTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HistoryWeightResultTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryWeightResultTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryWeightResultTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'HistoryWeightResultTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'HistoryWeightResultTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'HistoryWeightResultTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'HistoryWeightResultTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IntroduceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IntroduceViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MainHomeViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainHomeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_default_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_default_avatar' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_down' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smart_watch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smart_watch' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sync", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sync' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'MainHomeViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MainTabbarViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainTabbarViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MeasurementCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MeasurementCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MeasurementCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MeasurementCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_notification_gray_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_notification_gray_3' is used in nib 'NotificationViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no_notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_notification' is used in nib 'NotificationViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'NotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "darkText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkText' is used in nib 'NotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'NotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'NotificationViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in nib 'NotificationViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PickerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PickerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProfileCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _ProfileListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProfileTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5BloodPressureChartCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5BloodPressureChartCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5BloodPressureChartCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5BloodPressureChartCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'S5BloodPressureChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'S5BloodPressureChartCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5BloodPressureChartCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5BloodPressureDetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5BloodPressureDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5BloodPressureDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5BloodPressureDetailTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5BloodPressureDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5BloodPressureDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5BloodPressureTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5BloodPressureTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5BloodPressureTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5BloodPressureTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chart' is used in nib 'S5BloodPressureTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5BloodPressureTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5BloodPressureTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5DeviceSettingTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5DeviceSettingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5DeviceSettingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5DeviceSettingTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'S5DeviceSettingTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5DeviceSettingTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5DeviceSettingTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5ExerciseTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5ExerciseTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5ExerciseTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5ExerciseTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chart' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_distance", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_distance' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_up' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_kcal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_kcal' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_step", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_step' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5ExerciseTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5GoalViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5GoalViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'S5GoalViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'S5GoalViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "darkText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkText' is used in nib 'S5GoalViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'S5GoalViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5GoalViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5GoalViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5HeartRateChartCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5HeartRateChartCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5HeartRateChartCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5HeartRateChartCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'S5HeartRateChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'S5HeartRateChartCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5HeartRateChartCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5HeartRateDetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5HeartRateDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5HeartRateDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5HeartRateDetailTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5HeartRateDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5HeartRateDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5HeartRateTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5HeartRateTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5HeartRateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5HeartRateTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chart' is used in nib 'S5HeartRateTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5HeartRateTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5HeartRateTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5NotificationSettingTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5NotificationSettingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5NotificationSettingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5NotificationSettingTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5NotificationSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5NotificationSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5SleepChartCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5SleepChartCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SleepChartCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SleepChartCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'S5SleepChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_moon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_moon' is used in nib 'S5SleepChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'S5SleepChartCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5SleepChartCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5SleepChartCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5SleepDetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5SleepDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SleepDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SleepDetailTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5SleepDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5SleepDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5SleepTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5SleepTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SleepTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SleepTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chart' is used in nib 'S5SleepTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_moon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_moon' is used in nib 'S5SleepTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5SleepTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5SleepTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5SmartWatchDeviceTBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5SmartWatchDeviceTBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SmartWatchDeviceTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SmartWatchDeviceTBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'S5SmartWatchDeviceTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smart_watch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_smart_watch' is used in nib 'S5SmartWatchDeviceTBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5SmartWatchDeviceTBVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5SmartWatchDeviceTBVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5SmartWatchSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5SmartWatchSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5SpO2ChartCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5SpO2ChartCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SpO2ChartCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SpO2ChartCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'S5SpO2ChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'S5SpO2ChartCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5SpO2ChartCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5SpO2DetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5SpO2DetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SpO2DetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SpO2DetailTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5SpO2TableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5SpO2TableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5SpO2TableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5SpO2TableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chart' is used in nib 'S5SpO2TableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5SpO2TableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5SpO2TableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5Spo2DetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5Spo2DetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5StepActivityTBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5StepActivityTBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5StepActivityTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5StepActivityTBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'S5StepActivityTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_step_count", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_step_count' is used in nib 'S5StepActivityTBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5StepActivityTBVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5StepActivityTBVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5TemperatureChartCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5TemperatureChartCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5TemperatureChartCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5TemperatureChartCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_gray' is used in nib 'S5TemperatureChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_gray' is used in nib 'S5TemperatureChartCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_thermometer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_thermometer' is used in nib 'S5TemperatureChartCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5TemperatureChartCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5TemperatureDetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5TemperatureDetailTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5TemperatureDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5TemperatureDetailTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5TemperatureDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5TemperatureDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5TenperatureTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "S5TenperatureTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5TenperatureTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5TenperatureTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chart' is used in nib 'S5TenperatureTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'S5TenperatureTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'S5TenperatureTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _S5WatchFaceCLVCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5WatchFaceCLVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5WatchFaceCLVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5WatchFaceCLVCell
      }

      fileprivate init() {}
    }

    struct _S5WatchFaceSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5WatchFaceSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _S5WaterRemindTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5WaterRemindTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> S5WaterRemindTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? S5WaterRemindTableViewCell
      }

      fileprivate init() {}
    }

    struct _S5WaterSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "S5WaterSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SKTimeFilterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SKTimeFilterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ScaleActivityTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScaleActivityTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScaleActivityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScaleActivityTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'ScaleActivityTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scales", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scales' is used in nib 'ScaleActivityTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'ScaleActivityTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'ScaleActivityTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ScaleResultCollectionChart: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ScaleResultCollectionChart"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ScaleResultDetailViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScaleResultDetailViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in nib 'ScaleResultDetailViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ScaleResultRulerChart: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ScaleResultRulerChart"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ScaleResultViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScaleResultViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'ScaleResultViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ScaleResultViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'ScaleResultViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'ScaleResultViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ScaleViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScaleViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_phone_ble", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_ble' is used in nib 'ScaleViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ScaleViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'ScaleViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'ScaleViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SignificanceTBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignificanceTBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignificanceTBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignificanceTBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_blood_pressure", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blood_pressure' is used in nib 'SignificanceTBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'SignificanceTBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'SignificanceTBVCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'SignificanceTBVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SmartWatchExerciseViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SmartWatchExerciseViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SmartWatchS5ViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SmartWatchS5ViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_bluetooth", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bluetooth' is used in nib 'SmartWatchS5ViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'SmartWatchS5ViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SpO2DetailValueViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SpO2DetailValueViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SpO2MarkerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SpO2MarkerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SpO2TableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpO2TableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpO2TableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpO2TableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_heart_rate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart_rate' is used in nib 'SpO2TableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'SpO2TableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SpO2ViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpO2ViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_phone_ble", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_ble' is used in nib 'SpO2ViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'SpO2ViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'SpO2ViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'SpO2ViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SportTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SportTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SportTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SportTableViewCell
      }

      fileprivate init() {}
    }

    struct _StartViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'StartViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SyncSettingViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SyncSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'SyncSettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_facebook' is used in nib 'SyncSettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google' is used in nib 'SyncSettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sync_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sync_gray' is used in nib 'SyncSettingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unlink_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unlink_gray' is used in nib 'SyncSettingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'SyncSettingViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SyncTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SyncTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyncTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyncTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_button_link", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_button_link' is used in nib 'SyncTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'SyncTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'SyncTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'SyncTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SyncViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SyncViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SyntheticCategoriesTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SyntheticCategoriesTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyntheticCategoriesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyntheticCategoriesTableViewCell
      }

      fileprivate init() {}
    }

    struct _SyntheticTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SyntheticTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SyntheticTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SyntheticTableViewCell
      }

      fileprivate init() {}
    }

    struct _ThermometerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThermometerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TrackingViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TrackingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_link_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_link_2' is used in nib 'TrackingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'TrackingViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'TrackingViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WeightActivityTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeightActivityTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightActivityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightActivityTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'WeightActivityTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scales", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scales' is used in nib 'WeightActivityTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'WeightActivityTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'WeightActivityTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WeightDetailsCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeightDetailsCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeightDetailsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeightDetailsCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'WeightDetailsCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'WeightDetailsCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'WeightDetailsCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WeightMeasuringViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeightMeasuringViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in nib 'WeightMeasuringViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "subTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'subTitle' is used in nib 'WeightMeasuringViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title' is used in nib 'WeightMeasuringViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
